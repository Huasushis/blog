<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huasushis的博客</title>
  
  <subtitle>混氏新子的博客</subtitle>
  <link href="https://blog.huasushis.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.huasushis.cn/"/>
  <updated>2023-11-14T15:16:26.683Z</updated>
  <id>https://blog.huasushis.cn/</id>
  
  <author>
    <name>Huasushis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年11月14日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8814%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8814%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-11-14T14:37:52.000Z</published>
    <updated>2023-11-14T15:16:26.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天考得好呀。我发现我博客错别字有一点点多，以后要改正。不然看起来很难受。今天这个题是 SXYZ 的，看起来很好，很善良。切掉了前两道题，自我感觉 T2 简单于 T1。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这里是题解，虽然很简洁，但是很有价值！如果你不懂的话没有关系！因为我写这个地方的目的也不是为了讲懂你的。如果你懂了，那么你很幸运！恭喜你！如果你不懂的话！你可以看题解！如果你看懂了那么你就不用看我的了，如果你看不懂你看我的可能还是看不懂。放一下比赛链接：<a class="link" href="http://oi.cdshishi.net:9001/contest/6552b09a87e959064bad8b13">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p><a href="https://codeforces.com/gym/102978/problem/I"><strong>【Codeforces-Gym102978-Problem - I 】</strong></a></p><p>这道题很有趣，考验思维能力。很多看似可以一眼的地方其实很难一眼。简单讲解一下思维过程，因为我还要写 T4。首先看题，容易发现对于一个排列我们求那个串，我们从小到大枚举字符，如果这个后缀的长度小于要的，那肯定全部放，否则递归进去。然后这样想不出来，但是可以引导我们想出正解。后来我想到最小子序列不断变长应该会包含这个更小的，于是我想到了加数进去，然后一直保证这个更小的是更小的。后来写了写了写发现了问题，但是想了想发现这个问题砍掉就可以。正解就变成了不断加数进去让最小的还是最小的，而不是每次更长的最小的是最小的，这和那个没有关系。通过最后一个样例我们可以知道第一个逆序的相邻对之后就不能插东西了，显然。就这样，结束了！</p><p>P.S. 还是写多了呜呜。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p><strong>题目来源：</strong> <a href="https://www.luogu.com.cn/problem/P8227"><strong>【Luogu P8227 「Wdoi-5」建立与摧毁的结界】</strong></a></p><p>感觉题解有点复杂。其实我看到这种题一眼括号树。就会发现任何括号序列都可以转换成括号排排坐然后分组再进去的。然后就可以求得一个子树到达同一层要多少步。还会发现两个串如果有相同的一部分（也不叫相同，反正你能理解），对应树上两个大小相同，对应的 dfs 序位置也相同的子树，几次 dfs 就能搞定，不难。[[dfs]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>这道题也很有趣。总感觉很熟悉，但是不知道在哪里见到过。可以发现对于一个区间找到最大值（定义为值最大，编号也要最大），对于每一个位置处理一个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 451 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，定义为左边和右边在比这个位置大且能互相帮助的最近的一个。然后枚举右端点就能线段树维护了。细节较多。但是数据较水。[[线段树]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>题目来源：<a class="link" href="https://codeforces.com/problemset/problem/1416/E">【Codeforces-Problem-1416E】 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>还没做出来。看起来很有趣。数据结构优化 dp 的题目 [[dp]] [[数据结构]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>后记写什么呢？大家都很友善，也很可爱 (●’◡’●)。老师和同学都是好人。</p><h1 id="时事点评"><a href="#时事点评" class="headerlink" title="时事点评"></a>时事点评</h1><blockquote><p>纽约联合国总部13日降半旗，为本轮巴以冲突中遇难的101名工作人员志哀。<br>在经济及社会理事会会议厅，联合国秘书长古特雷斯主持默哀仪式，为巴以冲突中的遇难者默哀一分钟。他站在联合国常务副秘书长阿明娜和第78届联大主席弗朗西斯的中间，与来自世界各地赴纽约开会的联合国驻地协调员等一起，悼念遇难的同事。<br>古特雷斯在社交媒体上发文说，“今天，联合国大家庭为在加沙遇难的同事默哀”。他表示，截至目前已有超过100名联合国工作人员丧生，“这是联合国援助人员在如此短的时间内在冲突中丧生人数最多的一次”。<br>根据联合国近东巴勒斯坦难民救济和工程处发布的数据，自本轮巴以冲突爆发以来，已有101名联合国工作人员在加沙地带丧生。</p></blockquote><p>就不点评了，百度上面抄的。</p><p>还有看到有人说北航把原神和崩铁的 host 给 ban 了哈哈，好像是真的看起来。可怜可怜北航的同志们嘻嘻(●’◡’●)。</p>]]></content>
    
    
    <summary type="html">今天……我发现我好多以今天开头的摘要。于是我尝试使用 AI 来总结：今天考试还行，但发现博客错别字有点多，以后得注意。有些题看似简单，其实有难度。这个题比较友好，但也仅供参考。如有疑问，欢迎提问。另外，联合国为巴勒斯坦冲突中的工作人员默哀，北航禁止了原神和崩铁的host，希望大家理性看待。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="树" scheme="https://blog.huasushis.cn/tags/%E6%A0%91/"/>
    
    <category term="数据结构" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="思维" scheme="https://blog.huasushis.cn/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月13日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8813%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8813%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-11-13T14:48:43.000Z</published>
    <updated>2023-11-13T15:04:11.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>昨日中二病发作写了一篇离谱文章，请直接无视，别看阿⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄。害怕😨。今天早上模拟赛，还可以，但是 T2 不知道怎么脑子抽了想出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.47ex" role="img" focusable="false" viewbox="0 -841.7 2919.8 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的方法没有写，后来发现这样加上特判有 75 分。</p><p><img lazyload src="/images/loading.svg" data-src="https://pic1.zhimg.com/50/v2-4701821994288884fda8151463ebbd4f_720w.jpg?source=1940ef5c" alt="黑人小哥问号">。</p><p>好了，接下来进入正题。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>哦对了，T3 和 T4 看起来太变态了，邓老师也没有改出来，伤心，我也不会。放个链接：<a class="link" href="http://192.168.110.4/contest/655180f787e959064bad4404">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>就讲一下 T1 和 T2。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>贪心和二分两种方式，我选择二分答案，最开始写了一个两个 log 的 dp，后来发现可以贪心小于等于一半的，然后看有没有大于的能插进去。[[贪心]] [[二分答案]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>很有趣。我首先有一个 dp 是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="5.152ex" height="2.261ex" role="img" focusable="false" viewbox="0 -705 2277.1 999.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(1035,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1313,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(1834,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2112,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g></g></g></g></g></svg></mjx-container> 表示当前搞了前 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 个点，有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewbox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container> 条链尾巴接1个，k 条接两个，总共 l 个联通块。挺容易想的，还有要没有时间了，就不细说了。正解就是当前有多少个儿子还没有填，对于两个儿子的点，有比它小的儿子在加的时候就判断了，现在转移也更方便了。就是这样，看代码可能不是很好懂，想一想就懂了，就是拼链。[[dp]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天是新的一周，会越来越好的！加油！哈哈！明天再见！</p><h2 id="时事点评"><a href="#时事点评" class="headerlink" title="时事点评"></a>时事点评</h2><p>昨天写的文章被杜杜看到了，好尴尬，感觉自己好逊，据说他还要在明天早上早读这篇文章（话说明天不是英语早读吗，翻译成英文的话还好，毕竟我就听不懂了嘻嘻）。对此我作出的评价是：6。我以后再也不花那么长时间写那么尴尬的文章了，等我水平够了再说，点评结束。点评得很好，</p>]]></content>
    
    
    <summary type="html">秋高气爽神飞扬，踏遍平川心不变。一朝且慢悠然上，终到山头不需急。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="二分答案" scheme="https://blog.huasushis.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="noip" scheme="https://blog.huasushis.cn/tags/noip/"/>
    
    <category term="贪心" scheme="https://blog.huasushis.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月11日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8811%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8811%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-11-12T13:17:40.000Z</published>
    <updated>2023-11-12T14:54:36.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>放一下题目 pdf：<a href="/pdf/NOIP_luogu_2023.pdf">link</a>。</p><p>洛谷出的题，很好，非常善良。抛开洛谷的经济目标不谈（感觉有大病），洛谷还是给非强省、强校的学生提供了很大的帮助的。拜谢洛谷。虽然我川并不是弱省，但是感觉洛谷还是好善良（如善）。感谢洛谷。</p><p>考得不是很好，但是题目很好。挂了 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container> 多分。也算是模拟真实的考试了，非常激动，哇酷哇酷。考得感觉还是重思维，算法和数据结构好像并没有怎么考？（T4是线段树，但是好像也没有什么人做出来啊）。感觉逐渐 CF 化。嘻，这样 CCF 岂不是掉 C 了。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>简单说一下题解吧，其实后三道题考场上我最有思路的其实是 T4。后来看题解发现还是差不多的，但是写起来还是很有细节的。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>就是一个数论题。容易想到质因数分解，可以证明每次乘一个质数进去的树一定是所有的树中包含这个质数最少的。用个优先队列就行。还有，分解质数的时候建议使用根号算法，比枚举所有质数快。[[数论]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>构造题。有很多种构造方法，但是显然并没有在考场上想出来。ppt 里的是审题人的做法，出题人的方法未知（题解太多了）。ppt 里是构建之字形，用 n 条长度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 的链覆盖完全图，奇数要加一个点。写起来很复杂。看到题解里有个很简单的方法。如下。这是<a class="link" href="https://www.luogu.com.cn/blog/yingxue-cat/solution-p9837">原文链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。这里直接引用其原文。算了，不好引用，你们直接点进去看吧。[[构造]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>神奇的题目。本应该一眼看出来后面几个点都只是求最小的值的。说明我还是很弱呀(。・・)ノ。其实正解也很简单，n 小于29暴力 dp，大于的话暴力推式子就行。注意，dp 的时候如果你选择预处理阶乘请勿模！不要在该模的时候不模，不该模的时候模。<del>（逐渐开始人情世故）</del>。哦对，dp 的时候还要注意如果你使用记忆化 dfs 的话，每次从最小值开始枚举，不要从 1 开始，虽然这样洛谷上不会超时（刚好卡过去的），但是一般的像学校 oj 或者 CCF 的机子还是要超时的。[[dp]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>还没有改出来，比较伤心。其实想起来也并不是很难，考虑到非平局最后一定是摸到同色牌，因为绝顶聪明的两个人一定不甘于因为自己让别人赢（好傲娇）。又考虑到对方摸到和自己手中同样的牌双方的牌就必定会一直一样了，而且容易发现从双方的牌一样开始一定谁先摸到这种颜色的牌谁赢。但是要注意一个地方，考试的时候我就是这里被搅昏了导致最后此题直接摆烂（）。再次引用樱雪喵的话（<a class="link" href="https://www.luogu.com.cn/blog/yingxue-cat/solution-p9839">原文链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）：</p><blockquote><p>考虑这样的一组数据：牌堆依次为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.68ex" height="1.971ex" role="img" focusable="false" viewbox="0 -677 4278.7 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(2834,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mo" transform="translate(3334,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(3778.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g></g></g></svg></mjx-container>，初始手牌为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="3.268ex" height="1.946ex" role="img" focusable="false" viewbox="0 -666 1444.7 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>。<br>Alice 在第一轮是否把牌换成  都是平局，她更希望等到后面胜利。而 Bob 如果寄希望于后面胜利，不选择把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container> 换成 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，他最后只能失败。而如果他的目标是平局，他会摸走牌堆中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，并成功平局。<br>这启发我们思考一个问题：存在一些情况，如果一个人目标是取得胜利，他就输了；但如果他的目标仅仅是保住平局，却能成功阻止对面赢。这是不能直接贪心判断的。<br>考虑用如下做法改变他们的目标：先钦定平局算 Alice 赢，这等价于 Alice 的目标是保住平局。如果此时 Bob 仍然能赢，才算作 Bob 必胜。反之同理。<br>如果正反都不满足条件，则说明存在一种方式使本来要输的人保住平局，答案为平局。</p></blockquote><p>总结一下，相当于每次先判断 A 能不能平局即以上（A 是不是一定会输），再判断一下 A 能不能必胜。现在思路很清晰，应该很好写。[[线段树]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>很好的题目！再次感谢洛谷！虽然题目对于我来说似乎是有一点毒瘤，但是再次感谢洛谷 sama 的免费题目与讲评！洛谷好闪！拜谢洛谷！非常有学习意义！对了，还有一周就要考 noip 了，集训也要结束了。其实并没有太大的期待的说实话，不过我还是希望越好越好啦。开心地度过最后一周，就要会去上文化课啦。很是兴奋的，哇酷哇酷哇酷哇酷哇酷哇酷。</p><h1 id="时事点评"><a href="#时事点评" class="headerlink" title="时事点评"></a>时事点评</h1><p>最后一周加一个这个板块吧！虽然我不知道有什么意义，可能是想找点乐子。另外，我在这里声明，一下发言均为乐子发言，就当我是乐子人在虾扯蛋就行，因为我了解的很少。有些甚至不是时事。就简单对于持续了快一个月的巴以局势谈谈我的看法。</p><h2 id="针对巴以冲突的一些看法与点评"><a href="#针对巴以冲突的一些看法与点评" class="headerlink" title="针对巴以冲突的一些看法与点评"></a>针对巴以冲突的一些看法与点评</h2><p>首先目前国内舆论环境可以说基本是偏向巴勒斯坦的。阿拉伯地区的冲突其实一直很多，为什么这一次看起来有一些不同呢？首先这一次冲突（其实以色列已经确认为战争了，而俄乌冲突还是冲突）并不是由以色列发起的，是由哈马斯主动开始进攻。但我认为真正导致国际社会对其关注逐渐升高的还是<strong>人道主义灾难</strong>。毕竟双方都宣称自己的平民遭受到了攻击，并且加沙地带大量的医院与学校被炸毁。有自媒体爆料说其实之前以色列就有轰炸医院与学校的行为了，那么按照他的观点来说这一次冲突就是使这人道主义灾难急速加剧和发酵的导火索。</p><p>那么国际社会的态度是什么？国际社会普遍呼吁停火，在联合国安理会多次关于巴以问题的提案遭到美国一票否决后，终于在联大通过了停火的一份文件。显然联大并没有什么约束效力，但是也代表了各个国家的态度。为什么这中间如此曲折？考虑到各个国家的利益还有对哈马斯的定性。最后通过的文件可以说是很笼统的同时批评了巴勒斯坦和以色列双方，也没有将哈马斯定义为恐怖组织，这也算是很好的结果了。</p><p>再来谈谈我个人的看法。最开始我是可以说是就随着舆论主流是一边倒向巴勒斯坦的。后来我意识到这样是很不明智的行为。在我看过一个 UP 主用尝试科学地分析与解释这一场冲突（我看不大懂，很多名词不太明白）后，大概总结了一下几点。···（开个玩笑），就是巴以冲突和以往的冲突的性质都有很大的不同。它并不是阶级冲突，也不完全是宗教矛盾，也不完全是地域矛盾或者说纯粹的种族矛盾。然后巴拉巴拉的。可以说这是很复杂的，不能从单一的角度去看。但是能肯定的一点是，巴勒斯坦的反抗是历史的必然选择，巴勒斯坦人民能否从以色列人的压迫中解放？我们不得而知。还有很重要的一点是，我们不能确定，如果巴勒斯坦赢得了这场战争，以色列人的下场又将如何？真正的解放是思想上的解放，我们不能站在狭隘的民族主义上面去考虑问题，这将会带来更多的民族矛盾和种族歧视（最好的民族平等的方法就是不要再分民族了）。这种发展的路途上又会有什么问题？那就是宗教。</p><p>那就来谈一谈宗教相关的事情。宗教信仰与血缘关系共同支配了原始社会的社会制度，从而形成了不同的部落以至民族。而恩格斯说过，“物质生活资料的生产”的发展越是受到“限制”，越是处于“低水平”，血族关系（即血缘关系）就越是在较大程度上支配和制约人类社会的制度。伊斯兰国家和犹太教国家都是很依赖血缘关系的。但是显然，中东的伊斯兰国家和以色列都是宗教国家，但是很明显以色列是更发达的（我不确定）。（以下开始瞎扯）那么为什么会这样？第一个原因是美国的帮助。这很好理解，但是为什么？因为资本主义认为二战的纳粹只不过是资本主义的一个小错误，为了展示资本主义良好的恢复性，美国作为资本主义的老大哥必须要帮助犹太人。其次，以色列可以看成是几个大国间博弈的产物，可以说是博弈的焦点，用来控制中东地区的一个有力棋子。而且中东国家基本上是伊斯兰国家，政教合一（但也分好几个派别），团结起来力量不容小觑，只能用魔法打败魔法。（这里纯属扯淡，就先下一段吧）。</p><p>然后谈一谈伊斯兰教的问题。其实在一些知名的网站如某乎一些关于历史上我国内部某民族与汉族的矛盾的文章下会发现部分人是很反伊斯兰教的，并且会站队以色列，有网友举的例子是伊斯兰禁止我吃猪肉，但是犹太教虽然也不吃但允许我吃。虽然我觉得很扯，但是也不能说没有任何道理。在我看来，犹太教与伊斯兰教都是很保守的宗教，这一点区别只是各有各自的考量，我认为这俩宗教都是一个东西，不断强化血缘关系或民族主义一定是会激发民族矛盾或者国家之间的矛盾的。真正的解放是思想上的解放。但思想解放后一定也会有新的矛盾出现，我不知道是什么，但肯定不会更好也不会更坏，或许解放思想可能真的会更好吧？说会我国对一些少数民族的政策还是比较宽容的，保留了其原本的生活习惯与宗教信仰。毕竟 TG 在打天下的时候也少不了他们的帮助……</p><p>不小心说多了，感觉浪费时间啊……就当我划水算了，溜了，拜拜。希望世界和平！晚安(￣o￣) . z Z！</p>]]></content>
    
    
    <summary type="html">今天做的是 luogu 出的题，免费的欸！不管怎么说，良心大大的好。话说：我谷出题好又行，自有图谋前途明。免费讲评本不易，得利还得靠真心。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="数论" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="数据结构" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="构造" scheme="https://blog.huasushis.cn/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="洛谷" scheme="https://blog.huasushis.cn/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>USACO作题记录1</title>
    <link href="https://blog.huasushis.cn/2023/USACO%E4%BD%9C%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
    <id>https://blog.huasushis.cn/2023/USACO%E4%BD%9C%E9%A2%98%E8%AE%B0%E5%BD%951/</id>
    <published>2023-11-10T14:40:52.000Z</published>
    <updated>2023-11-13T14:55:22.855Z</updated>
    
    <content type="html"><![CDATA[<p>[[2023年11月10日总结]] 这一天的题目。</p><h1 id="USACO22OPEN-Alchemy-B"><a href="#USACO22OPEN-Alchemy-B" class="headerlink" title="[USACO22OPEN] Alchemy B"></a>[USACO22OPEN] Alchemy B</h1><p><a class="link" href="https://www.luogu.com.cn/problem/P8268">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>二分答案。倒着建图，是一个 dag。验证的方法感觉类似 <a class="link" href="https://www.luogu.com.cn/problem/P7113">[NOIP2020] 排水系统 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。但是要注意中间判断一下往下传的多余量有没有超过总金属数。不然容易指数级增长爆掉。这道题写的时候降智了，还搞了一遍拓扑排序，其实倒着来就行。 #二分答案</p><h1 id="USACO22OPEN-Visits-S"><a href="#USACO22OPEN-Visits-S" class="headerlink" title="[USACO22OPEN] Visits S"></a>[USACO22OPEN] Visits S</h1><p><a class="link" href="https://www.luogu.com.cn/problem/P8269">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>会发现是一个内向基环树（应该是叫这个名字），发现只要删去环上面那个最小的边就行。可以边反过来拓扑排序找环。我这里直接使用的是最小（大）生成树的方式。</p><h1 id="USACO22OPEN-COW-Operations-S"><a href="#USACO22OPEN-COW-Operations-S" class="headerlink" title="[USACO22OPEN] COW Operations S"></a>[USACO22OPEN] COW Operations S</h1><p><a class="link" href="https://www.luogu.com.cn/problem/P8271">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="11.838ex" height="2.156ex" role="img" focusable="false" viewbox="0 -759 5232.5 953"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(33,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="msup" transform="translate(277.5,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(845.3,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="msup" transform="translate(1367.2,0)"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(311,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="msup" transform="translate(2089.3,0)"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(796,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="msup" transform="translate(3129.7,0)"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(311,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="msup" transform="translate(3851.9,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(1136.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g></g></g></svg></mjx-container> 分别映射到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.406ex" height="1.946ex" role="img" focusable="false" viewbox="0 -666 2389.3 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></svg></mjx-container>，发现两种操作异或和不变，并且可以发现可以操作交换相邻两个字符。可以证明最后一定能只剩下一个字符或者空。所以求得区间异或和是否为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 即可。</p><h1 id="USACO22OPEN-Hoof-and-Brain-P"><a href="#USACO22OPEN-Hoof-and-Brain-P" class="headerlink" title="[USACO22OPEN] Hoof and Brain P"></a>[USACO22OPEN] Hoof and Brain P</h1><p><a class="link" href="https://www.luogu.com.cn/problem/P8276">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>很有趣的一道题。首先把走不到环中的点去掉，拓扑排序即可。然后易证两个在剩余图上能够遇到一定是在两个的共同必经点，而且两个棋子如果有共同的必经点一定能碰到。朴素的方法就是对于一个起始点，枚举点删掉，如果这个起点不能到一个环里了，那么这个点就一定是必经点。用 bitset 存一下，询问的时候与一下就行。考虑正解。会发现所有的必经关系可以抽象成几条链，参考 luogu 上的第一篇<a class="link" href="https://www.luogu.com.cn/blog/wxbgsz666/solution-p8276">题解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。因此在同一个必经关系中一定有共同必经的点。然后参考洛谷上第三篇<a class="link" href="https://www.luogu.com.cn/blog/came11ia/solution-p8276">题解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，发现对于一个缩点的图，出度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 的点一定能和其指向的点连到一个关系图中，使用启发式合并。如果合并后指向这一坨的点有出度变成1了，那就代表这个点一定必经这个缩的点，而进入这个缩的点后一定又必经一些点，所以也要加入。这样最后剩下的图中每个点的出度一定大于 1 （包括自环）。可以证明这样的图中一定没有新的必经点了，因此所有的都被合并了。查询的时候并查集查询即可。复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.27ex" height="2.584ex" role="img" focusable="false" viewbox="0 -892 6749.3 1142"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msup" transform="translate(2196.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,421.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3911.2,0)"><path data-c="2061" d=""/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4077.9,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4900.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(5900.3,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(6360.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。参考代码：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> Q;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="type">int</span> fa[N]; <span class="comment">//并查集</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ini</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getfa</span><span class="params">(<span class="type">int</span> v)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> v == fa[v] ? v : fa[v] = <span class="built_in">getfa</span>(fa[v]);</span><br><span class="line">}</span><br><span class="line">set&lt;<span class="type">int</span>&gt; g[N], r[N]; <span class="comment">//用set维护图，方便去除重边，可以使用更高效的方法。</span></span><br><span class="line"><span class="comment">//g: 正向图，r: 反向边的图</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="built_in">ini</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">    g[u].<span class="built_in">emplace</span>(v);</span><br><span class="line">    r[v].<span class="built_in">emplace</span>(u);</span><br><span class="line">  }</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt; q; <span class="comment">//队列，拓扑排序和后面合并可以用一个队列，节省一点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">    <span class="keyword">if</span> (g[i].<span class="built_in">size</span>() == <span class="number">0</span>) q.<span class="built_in">emplace</span>(i);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) { <span class="comment">//去除走不到环里的点</span></span><br><span class="line">    <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    fa[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : r[u]) {</span><br><span class="line">      g[i].<span class="built_in">erase</span>(u);</span><br><span class="line">      <span class="keyword">if</span> (!g[i].<span class="built_in">size</span>()) q.<span class="built_in">emplace</span>(i);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) { <span class="comment">//将出度为1的点加入队列</span></span><br><span class="line">    <span class="keyword">if</span> (g[i].<span class="built_in">size</span>() == <span class="number">1</span>) q.<span class="built_in">emplace</span>(i);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) { <span class="comment">//合并所有在一个必经关系中的点</span></span><br><span class="line">    <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> v = *g[u].<span class="built_in">begin</span>();</span><br><span class="line">    u = <span class="built_in">getfa</span>(u), v = <span class="built_in">getfa</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (r[u].<span class="built_in">size</span>() &gt; r[v].<span class="built_in">size</span>()) <span class="built_in">swap</span>(u, v);<span class="comment">//启发式合并</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : r[u]) { <span class="comment">//这里只用合并入的边，因为出的边更改后也会找到根继续合并入的边</span></span><br><span class="line">      g[i].<span class="built_in">erase</span>(u);</span><br><span class="line">      g[i].<span class="built_in">emplace</span>(v);</span><br><span class="line">      r[v].<span class="built_in">emplace</span>(i);</span><br><span class="line">      <span class="keyword">if</span> (g[i].<span class="built_in">size</span>() == <span class="number">1</span>) q.<span class="built_in">emplace</span>(i); <span class="comment">//出度为1加入队列</span></span><br><span class="line">    }</span><br><span class="line">    fa[u] = v;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">  <span class="keyword">while</span> (Q--) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">    u = <span class="built_in">getfa</span>(u), v = <span class="built_in">getfa</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (!u || !v || u == v) { <span class="comment">//询问，如果有点走不到环或在一个关系中🧠必胜</span></span><br><span class="line">      <span class="built_in">putchar</span>(<span class="string">'B'</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="built_in">putchar</span>(<span class="string">'H'</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>#启发式合并 #拓扑排序 [[启发式合并]] [[拓扑排序]]</p>]]></content>
    
    
    <summary type="html">USACO的做题记录1</summary>
    
    
    
    <category term="题解" scheme="https://blog.huasushis.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="USACO" scheme="https://blog.huasushis.cn/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月10日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8810%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%8810%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-10T14:37:33.000Z</published>
    <updated>2023-11-10T14:50:47.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天早上是练习赛，还是 USACO 的题目。最后一道题是白金组的，比较有难度。前三道题还是很简单的，具体可以看我的 USACO 作题记录1。前几次练习赛 USACO 的题目我就没有放在那个里面的，比较麻烦，以后就会放在那里面了，请谅解。题解也请参照那个里面的，这里就不放了。</p><p>那就总结一下收获吧。不是很好用人话说出来……就是说几个关键字吧。异或，拓扑排序，必经点，启发式合并……感觉还是非常的有趣的。</p><p>然后就做 <strong>线段树（2）- 可持久化</strong> 的专题练习了，如果有令人印象深刻的我也会记录在这里。</p><p>[[AFO 小技巧]]又要新增了，<a class="link" href="https://www.luogu.com.cn/problem/P2633">Count on a tree <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。类似于树上前缀和。这里要谨记，可持久化线段树或动态开点线段树的根要加 <code>rt</code>！不是节点编号! [[可持久化线段树]]</p>]]></content>
    
    
    <summary type="html">今天是练习赛。悬崖勒马心自知，爆零容易分难有。千难万险越险阻，夺得桂冠意自足。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="可持久化线段树" scheme="https://blog.huasushis.cn/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="USACO" scheme="https://blog.huasushis.cn/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月9日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%889%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%889%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-09T14:54:36.000Z</published>
    <updated>2023-11-09T15:05:30.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一眨眼，一天又过去了嘿嘿。今天鸽子回归，热烈祝贺！鼓掌！今天是做的练习赛，早上三道题，一道矩阵快速幂 + 拓展欧几里德，还有两道模拟。感觉都挺简单的，就是最后一道题的数据把我恶心到了。题目说链的长度是偶数，结果样例有奇数就算了，还有个点只有一个点的链，把我的判断端点给卡了，生气。</p><p>哦对了，今天早上教室里面还飞进了一只小鸟。很漂亮。可爱。(●’◡’●)。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>就简单说一下吧，模拟题，也没有什么好讲的。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>容易发现是 fib 数列的第 n 项的 k 倍。矩阵快速幂求一下再求一下逆元就可以。[[数论]] [[矩阵快速幂]] [[拓展欧几里得]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>要求判断 ipv6 地址是否合法并且将其展开成完整形式。也不难，照着题意写一些就行。 [[模拟]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>记录一个点从这里起始过没有。如果后来回到起点那肯定不行。否则每次枚举走路，走一走就行，也不是很难的样子。最短就用 bfs 就可以。bfs 的部分都是复制的，其实写不了多少。为了好看，这里贴上代码。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 55</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll t;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p(x, y) (x * n + y)</span></span><br><span class="line"><span class="type">bool</span> vis[N][N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">4</span>][<span class="number">2</span>] = {<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>};<span class="comment">//N, E, S, W</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hf(x, y) (x &gt;= 0 &amp;&amp; x <span class="string">&lt; n &amp;&amp; y &gt;</span>= 0 &amp;&amp; y &lt; n)</span></span><br><span class="line"><span class="type">bool</span> vi[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">lc</span> {</span><br><span class="line">  <span class="type">int</span> x, y, dis;</span><br><span class="line">};</span><br><span class="line"><span class="function">ll <span class="title">walk</span><span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>{</span><br><span class="line">  ll tot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span>(s[x][y]) {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>: {</span><br><span class="line">      <span class="type">int</span> bc = <span class="number">1</span>, dir = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bc; ++i) {</span><br><span class="line">          ++tot;</span><br><span class="line">          x += f[dir][<span class="number">0</span>], y += f[dir][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (!<span class="built_in">hf</span>(x, y) || s[x][y] != <span class="string">'*'</span>) {</span><br><span class="line">            <span class="keyword">return</span> tot;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        dir = (dir + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(dir &amp; <span class="number">1</span>)) ++bc;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'I'</span>: {</span><br><span class="line">      <span class="type">int</span> tx = x, ty = y, mad = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(vi, <span class="number">0</span>, <span class="built_in">sizeof</span>(vi));</span><br><span class="line">      queue&lt;lc&gt; q;</span><br><span class="line">      q.<span class="built_in">push</span>({tx, ty, <span class="number">0</span>});</span><br><span class="line">      vi[tx][ty] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="keyword">auto</span> [nx, ny, dis] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (dis &gt; mad) tx = nx, ty = ny, mad = dis;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dis == mad) {</span><br><span class="line">          <span class="keyword">if</span> (nx &lt; tx) tx = nx, ty = ny;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (nx == tx &amp;&amp; ty &lt; ny) ty = ny;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) {</span><br><span class="line">          <span class="type">int</span> tox = nx + f[i][<span class="number">0</span>], toy = ny + f[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (!<span class="built_in">hf</span>(tox, toy) || vi[tox][toy] || s[tox][toy] != <span class="string">'I'</span>) <span class="keyword">continue</span>;</span><br><span class="line">          vi[tox][toy] = <span class="number">1</span>;</span><br><span class="line">          q.<span class="built_in">push</span>({tox, toy, dis + <span class="number">1</span>});</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      x = tx, y = ty;</span><br><span class="line">      tot = mad;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) {</span><br><span class="line">        x += f[<span class="number">0</span>][<span class="number">0</span>], y += f[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hf</span>(x, y)) <span class="keyword">return</span> tot;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> tot;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'B'</span>: {</span><br><span class="line">      <span class="built_in">memset</span>(vi, <span class="number">0</span>, <span class="built_in">sizeof</span>(vi));</span><br><span class="line">      <span class="type">int</span> tx = x, ty = y, mid = <span class="number">1e9</span>;</span><br><span class="line">      queue&lt;lc&gt; q;</span><br><span class="line">      q.<span class="built_in">push</span>({tx, ty, <span class="number">0</span>});</span><br><span class="line">      vi[tx][ty] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="keyword">auto</span> [nx, ny, dis] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> flg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) {</span><br><span class="line">          <span class="type">int</span> tox = nx + f[i][<span class="number">0</span>], toy = ny + f[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">hf</span>(tox, toy)) flg += s[tox][toy] == <span class="string">'B'</span>;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="built_in">hf</span>(tox, toy) || vi[tox][toy] || s[tox][toy] != <span class="string">'B'</span>) <span class="keyword">continue</span>;</span><br><span class="line">          vi[tox][toy] = <span class="number">1</span>;</span><br><span class="line">          q.<span class="built_in">push</span>({tox, toy, dis + <span class="number">1</span>});</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// assert(flg &gt; 0);</span></span><br><span class="line">        <span class="keyword">if</span> (flg &lt;= <span class="number">1</span> &amp;&amp; dis &lt; mid) tx = nx, ty = ny, mid = dis;</span><br><span class="line">      }</span><br><span class="line">      x = tx, y = ty, tot = mid;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) {</span><br><span class="line">        x += f[<span class="number">1</span>][<span class="number">0</span>], y += f[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hf</span>(x, y)) <span class="keyword">return</span> tot;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> tot;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'W'</span>: {</span><br><span class="line">      <span class="built_in">memset</span>(vi, <span class="number">0</span>, <span class="built_in">sizeof</span>(vi));</span><br><span class="line">      <span class="type">int</span> tx = x, ty = y, mad = <span class="number">0</span>;</span><br><span class="line">      queue&lt;lc&gt; q;</span><br><span class="line">      q.<span class="built_in">push</span>({tx, ty, <span class="number">0</span>});</span><br><span class="line">      vi[tx][ty] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="keyword">auto</span> [nx, ny, dis] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> flg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) {</span><br><span class="line">          <span class="type">int</span> tox = nx + f[i][<span class="number">0</span>], toy = ny + f[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">hf</span>(tox, toy)) flg += s[tox][toy] == <span class="string">'W'</span>;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="built_in">hf</span>(tox, toy) || vi[tox][toy] || s[tox][toy] != <span class="string">'W'</span>) <span class="keyword">continue</span>;</span><br><span class="line">          vi[tox][toy] = <span class="number">1</span>;</span><br><span class="line">          q.<span class="built_in">push</span>({tox, toy, dis + <span class="number">1</span>});</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// assert(flg &gt; 0);</span></span><br><span class="line">        <span class="keyword">if</span> (flg &lt;= <span class="number">1</span> &amp;&amp; dis &gt; mad) tx = nx, ty = ny, mad = dis;</span><br><span class="line">      }</span><br><span class="line">      x = tx, y = ty, tot = mad;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) {</span><br><span class="line">        x += f[<span class="number">3</span>][<span class="number">0</span>], y += f[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hf</span>(x, y)) <span class="keyword">return</span> tot;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> tot;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">"adventure.in"</span>,  <span class="string">"r"</span>, stdin);</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">"adventure.out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line">  <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;t) &amp;&amp; (n != <span class="number">0</span> || t != <span class="number">0</span>)) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> w, h;</span><br><span class="line">    ll tim = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w, &amp;h);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">while</span> (tim &lt;= t) {</span><br><span class="line">      <span class="keyword">if</span> (vis[w][h]) {</span><br><span class="line">        tim = <span class="number">1e18</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      vis[w][h] = <span class="number">1</span>;</span><br><span class="line">      ll ys = <span class="built_in">walk</span>(w, h);</span><br><span class="line">      tim += ys;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">hf</span>(w, h)) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    tim &lt;= t ? <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tim) : <span class="built_in">puts</span>(<span class="string">"Die hard"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>把昨天 T3 调了。后来发现是一个弱智错误。这里要<strong>打上重点</strong>。以后默认初始化 stuct 的时候千万不要用全局变量或者非常量进行初始化！太恶心拉！要记住！不然初始化时的值是0阿！分数也会变成0阿！</p><p>下午写了去年 noip T4。那个线段树。感觉还是很神奇的。晚上要做一个可持久化线段树的专题。<a class="link" href="http://oi.cdshishi.net:9001/contest/654c86ef4d556106606a5571">在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。还是很好玩的。这周又要结束了阿。看起来。只有一周了。有一些不安和期待。希望明天会更好！</p>]]></content>
    
    
    <summary type="html">今天是练习赛，还改了一些题，棒棒哒！</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="矩阵快速幂" scheme="https://blog.huasushis.cn/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="可持久化线段树" scheme="https://blog.huasushis.cn/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="主席树" scheme="https://blog.huasushis.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
    <category term="数论" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="模拟" scheme="https://blog.huasushis.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="拓展欧几里得" scheme="https://blog.huasushis.cn/tags/%E6%8B%93%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月8日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%888%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%888%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-11-08T14:48:55.000Z</published>
    <updated>2023-11-08T15:01:35.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天是模拟赛。还是比较难的。但是暴力能拿到 210 pts。说什么好呢。好像也没有什么好说的。感觉似乎还是那样。今天 hyb 生病了。可怜，希望他快点好起来。以前总是能在这个地方水一些东西，现在不想水了乎哉。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>今天的题思维和代码能力各需参半。看起来这套题很好的样子。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>用个桶，调和级数去暴力枚举就可以。[[数论]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>区间 dp。枚举区间内最后几个删掉的。会发现这个必须比这个区间右边那个点颜色不同。每次删除相当于删除连通块的最后一个。就行了。合并的时候乘一个组合数就可以，因为两边是独立的。 [[区间dp]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>好不容易看懂了。考虑到由于一个快速通道减去 1 的代价，所以不能走回头路。那么分为两个方向分别来搞。离散化，然后发现相当于走快速通道的个数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="3.567ex" height="1.882ex" role="img" focusable="false" viewbox="0 -694 1576.8 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(1055.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 的对于所有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 的和。又会发现当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="7.35ex" height="1.91ex" role="img" focusable="false" viewbox="0 -694 3248.7 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1235.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="msub" transform="translate(2291.1,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container> 时显然 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.166ex" height="1.91ex" role="img" focusable="false" viewbox="0 -694 957.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 是包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.166ex" height="1.91ex" role="img" focusable="false" viewbox="0 -694 957.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container> 的方块选择的。因此对于每一种 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>，枚举左上角离散化的点（一个块）对应右下角的矩形并之和即可。 [[离散化]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>线段树。还没有改。[[线段树]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>再次可怜可怜的 pigeon。悲伤。希望大家平安。</p>]]></content>
    
    
    <summary type="html">今天是模拟赛。还是很难，但是相对于开始还是感觉轻松了不少。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="区间dp" scheme="https://blog.huasushis.cn/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
    <category term="数论" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="离散化" scheme="https://blog.huasushis.cn/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月7日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%887%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%887%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-07T14:47:52.000Z</published>
    <updated>2023-11-07T14:51:53.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天早上是练习赛。不是很难。今天没有什么印象深刻的事情。确实没有。大家都很正常，像往常一样。大家都很安静，很爱唱歌。似乎与往常没有什么不同。哦对了，昨天开始感觉变冷了，主要是早上，还有这几天天气都很晴朗，白天都很热，教室里也很热。突然发现一些事情，一些事情，哇酷哇酷。</p><p>话不多说，写哈。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这里是题解，写这段话的目的主要是为了防止标题之间空的太难看。写在这里乌拉乌拉。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>正着难，那就倒着来，[[并查集]]，哈，完了。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>也没有什么好说的。Trie 树上 dfs，顺便记录一下当前的图，保证每一次 dfs 都是个 dag 就行。用个 vector 再压个位就搞定。[[Trie 树]] [[传递闭包]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>考场上思路错了没想出来。就是分层图。你也可以想象成状态机。发现两个边 double 或变成 0。就可以用2个 bit 记录一下有没有过就行。转移就或一下。这样就不用分一大坨类来跑最短路了。[[分层图]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实我还没有写下午干了什么，其实也没有做什么。哦对，今天我去学习了一下 lambda。其实之前就会，今天主要是去看了一下 Y 组合子还有柯里化。显然，没有看懂，好像学了也没有什么卵用……。悲伤。继续去刷 noip 真题了。</p>]]></content>
    
    
    <summary type="html">今天是练习赛，好像没有什么新的事情。哎呀，最近好些人生病了，要注意身体啊。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Trie树" scheme="https://blog.huasushis.cn/tags/Trie%E6%A0%91/"/>
    
    <category term="dfs" scheme="https://blog.huasushis.cn/tags/dfs/"/>
    
    <category term="并查集" scheme="https://blog.huasushis.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="传递闭包" scheme="https://blog.huasushis.cn/tags/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/"/>
    
    <category term="分层图" scheme="https://blog.huasushis.cn/tags/%E5%88%86%E5%B1%82%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月6日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%886%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%886%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-06T15:02:29.000Z</published>
    <updated>2023-11-06T15:04:28.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天模拟赛。大家都很高。我也不过多拿了 15 分的暴力分罢了。但是今天的题还是很有趣的。感觉不如之前的有些题难。也有可能是我变聪明了嘻嘻。话说今天升旗仪式去领奖了，还是中考的。好可爱，一大堆。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>时间不是很多，就赶快进入正题。总结一下，今天 T1 难度正常，T2……不好说，T3 神仙题，T4 帅。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>根据样例解释很容易发现几个特征，不停复制自己连向根，写出二进制后很容易发现规律。组合数搞一稿就出来了。注意读入输出效率。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>考场上没有观察到一个性质，失之交臂。首先考场上我想出了是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.206ex;" xmlns="http://www.w3.org/2000/svg" width="3.109ex" height="2.398ex" role="img" focusable="false" viewbox="0 -969 1374 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"/></g><rect width="521" height="60" x="853" y="849"/></g></g></g></svg></mjx-container> 的层数下 dp，但是我没有发现对于每一列，使用大招的必然是最下面连续一段前缀。想到这点之后就很容易 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.206ex;" xmlns="http://www.w3.org/2000/svg" width="4.466ex" height="2.398ex" role="img" focusable="false" viewbox="0 -969 1974 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msqrt" transform="translate(600,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"/></g><rect width="521" height="60" x="853" y="849"/></g></g></g></svg></mjx-container> 来 dp 了。[[dp]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>首先可以看出冒泡排序。然后又很容易看出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.466ex;" xmlns="http://www.w3.org/2000/svg" width="6.36ex" height="2.036ex" role="img" focusable="false" viewbox="0 -694 2811.3 900"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(766.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mo" transform="translate(2044.7,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(2211.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 的方法。考场上我就想到这里了。考场上我还想到了一个想法，但看起来很难实现，就是观察限制大概是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.489ex" height="1.532ex" role="img" focusable="false" viewbox="0 -666 1100 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，然后就想可能是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="16.217ex" height="2.379ex" role="img" focusable="false" viewbox="0 -706.5 7167.9 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mfrac" transform="translate(1822.4,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="624.3" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(2908.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mfrac" transform="translate(3909.2,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><rect width="624.3" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(4995.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mo" transform="translate(5995.9,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g></g></g></svg></mjx-container> 的结构，就去想把大的一半放到偶数位上然后操作，接着一次总的然后再搞小的……就这样，于是我没有想出来。正解是倒着做，这样就很容易了，然后从后往前搞就行。[[构造]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>最小路径覆盖。Source: CodeChef Annual Parade。这样子就很简单。最小费用最大流，每次枚举流量，搞最小值就行。如果询问更大，就要用斜率优化了。[[最小费用最大流]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天后记记一些什么呢？其实我也不清楚。山风蛊，万物皆易，穷则变，变则通，通则达。前途漫漫，饱含希望！</p>]]></content>
    
    
    <summary type="html">又是一周的开始！新的转机，新的变化！变化！哈！</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="最小费用最大流" scheme="https://blog.huasushis.cn/tags/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="noip" scheme="https://blog.huasushis.cn/tags/noip/"/>
    
    <category term="构造" scheme="https://blog.huasushis.cn/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="最小路径覆盖" scheme="https://blog.huasushis.cn/tags/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月3日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%883%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%883%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-03T14:53:41.000Z</published>
    <updated>2023-11-03T15:01:18.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>铛铛铛铛！一天又结束啦！早上做了一套练习赛，还是 USACO 的题目，恶心的是 T2 翻译太恶心了。话说怎么今天这么快进入了正题？不行，再水一下。今天晚上，也就是我正在写这段话的时候，我们的运动会正在举行闭幕式。差不多有一坤天吧，终于结束了。热闹的操场也将会归于沉寂。我好怀念清早来到学校操场上，跨过整个操场，没有人，有许多鸽子和麻雀在上面散步的情景。挺有趣的。哈哈。现在操场上人已经散了，刚刚测了模板，就是逆元，不难。都要慢慢飘落，沉淀下来了。哦对了，明天有个模拟赛诶，南外出的。虽然我并没有什么信心，但是我很有信心。运动会结束了，我们的集训还没结束。话说等到集训结束的那天会发生什么呢？我想什么都不会发生，因为没有必要。嘻嘻，有到了晚上。今天会打 vp 吗？我不确定。反正我肯定是要把 树的重心 那道题写了，不然很难受。</p><p>好了，说回正题。今天早上练习赛。炸了。但是还好。也有教训。其中也有我不想打对拍的缘故。以后还是要打对拍，尽量打。没有什么感想。感觉好几次都是站在正解的门口瞅了一下，然后走到了隔壁的门里。说明我还是比较逊了哈哈，精度误差有几米，看来要缩小精度，不缺德（雾）。</p><h1 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h1><p>上午的话，嗯，就那样，前面也说了，这里也就不细说了。嗯，确实。考得不是特别的理想，但是还好，挺好的。嘻嘻，可以吧。还是有一些经验的（不就是教训说好听一点吗，可恶）。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这道题可以三分也可以二分。我二分的和。但是挂了。因为下界要向上取整。可恶。[[二分答案]] [[三分答案]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>这道题，翻译立大功，导致我们都理解错题目了，想不出正解，暴力也炸掉了，GG。浪费我的生命呜呜呜呜呜。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>显然每条边只会走一次，dfs 一下就完。[[dfs]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>dp。似乎不是很难？应该还是可以想到的。怎么说呢，就是很显然。也很有趣。反正这种题一眼就那样。（所以我为什么没有想出来？这么简单你怎么没有做出来？》》》）。[[dp]]</p><h1 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h1><p>改题，然后今天有体育课！去打乒乓球了！好玩！</p><h1 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h1><p>就是现在啦！教练让我们去学习猫树，那就学习完之后再去写树的重心！话说还没有放链接，那就勉为其难地放一个吧！<a class="link" href="http://oi.cdshishi.net:9001/contest/6543d2f74d55610660683757">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。还有那道猫树的题目：<a class="link" href="https://www.luogu.com.cn/problem/SP1043">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。顺便把树的重心也放了：<a class="link" href="https://www.luogu.com.cn/problem/P5666">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>喜报！通过猫树模板！[[猫树]]</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以后还是尽量别看我第一段吧……好尴尬。つ﹏⊂。发疯ing。(●’◡’●)，第一段纯属水字数，后面才是正文。话说这样的话……以后最后一段也尽量不看吧哈哈O(∩_∩)O，也是水字数的嘻嘻。</p>]]></content>
    
    
    <summary type="html">一周又结束了，嘿。还不错呢。又好容易打成有啊，好讨厌。今天运动会也结束了，依然是和我们没有什么太大的关系。有什么好说的呢？看看就行。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="CSP-S" scheme="https://blog.huasushis.cn/tags/CSP-S/"/>
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="二分答案" scheme="https://blog.huasushis.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="dfs" scheme="https://blog.huasushis.cn/tags/dfs/"/>
    
    <category term="USACO" scheme="https://blog.huasushis.cn/tags/USACO/"/>
    
    <category term="三分答案" scheme="https://blog.huasushis.cn/tags/%E4%B8%89%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="猫树" scheme="https://blog.huasushis.cn/tags/%E7%8C%AB%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月2日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%882%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%882%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-02T14:50:20.000Z</published>
    <updated>2023-11-02T15:37:07.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天晚上因为打了一场 vp 导致我没来得及写总结，好可惜。但是如果今天不写的话以后更不可能写得完。所以就简单地写一写吧。比较简略请见谅。谢谢。</p><p>但是就算这么说，我也想说点什么，似乎又没有什么好说的。你说得对，我又在水字数了哈哈。但是一转眼又一周要过去了……今天是疯狂星期四！可是疯狂后又是什么呢？什么都没有了。还是希望淡淡的、莫名其妙地就把这几年过去了。（装Xing，不要理我哇酷哇酷）。</p><h1 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h1><p>今天早上就是练习赛而已。emm，三道题，USACO 的。大概可能是 noip T1 的难度吧？或许是这样的。<a class="link" href="http://oi.cdshishi.net:9001/contest/654260974d5561066067ca5a">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。就是这个。不是很难。也不想讲太多。就贴一下代码，以彰显我的 blog 很认真（误）。</p><h2 id="T1-Milk-Sum"><a href="#T1-Milk-Sum" class="headerlink" title="T1 Milk Sum"></a>T1 Milk Sum</h2><p>排一个序，插一插，减一减就行。贪心显然。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 150010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">ll y;</span><br><span class="line">ll sum, hz[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"a.in"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"a.out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">b[i] = a[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) sum += b[i] * i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i; --i) hz[i] = hz[i + <span class="number">1</span>] + b[i];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) {</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;x, &amp;y);</span><br><span class="line">ll tmp = sum;</span><br><span class="line">ll ps = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>, a[x]) - b;</span><br><span class="line">tmp -= hz[ps + <span class="number">1</span>] + a[x] * ps;</span><br><span class="line">ll jr = <span class="built_in">upper_bound</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>, y) - b;</span><br><span class="line">tmp += hz[jr];</span><br><span class="line"><span class="keyword">if</span> (jr &lt;= ps) tmp -= b[ps];</span><br><span class="line"><span class="keyword">else</span> --jr;</span><br><span class="line">tmp += y * jr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tmp);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>这里写的很复杂（颩脸(T_T)），其实改变的只是两个数之间的那部分罢了。</p><h2 id="T2-Field-Day"><a href="#T2-Field-Day" class="headerlink" title="T2 Field Day"></a>T2 Field Day</h2><p>这道题没有做出来。但是看样子我们 oj 上的数据比较水。我写得45 pts 的暴力拿了 80 pts，神奇。正解大致有两种。第一种是把数拆成前一半和后一半。类似题目请参照 CSP-S 2020 初赛最后一道题。（应该是吧）。还有一种就是相当于是取反的汉明距离最近，搞一搞就行。很好写，就这样。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 150010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, c;</span><br><span class="line"><span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="type">int</span> f[<span class="number">262200</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getv</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c; ++i) {</span><br><span class="line">ans = (ans &lt;&lt; <span class="number">1</span>) | (s[i] == <span class="string">'G'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"b.in"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"b.out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;n);</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"><span class="keyword">auto</span> tmp = <span class="built_in">getv</span>();</span><br><span class="line">f[tmp] = <span class="number">0</span>;</span><br><span class="line">a.<span class="built_in">emplace_back</span>(tmp);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c; ++i) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; c); ++j) {</span><br><span class="line">f[j ^ (<span class="number">1</span> &lt;&lt; i)] = <span class="built_in">min</span>(f[j ^ (<span class="number">1</span> &lt;&lt; i)], f[j] + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : a) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c - f[((<span class="number">1</span> &lt;&lt; c) - <span class="number">1</span>) ^ i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="T3-Pareidolia"><a href="#T3-Pareidolia" class="headerlink" title="T3 Pareidolia"></a>T3 Pareidolia</h2><p>就是个字符串 dp？每一位找到第一个能够匹配第一个 Bessie 的位置，然后就是那个位置后一个的 f 加上这后面的距离。（f 就是以这一位开头的贡献）。比较显然，就不想说了，看看代码画一画就行。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 300010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> pp[<span class="number">8</span>] = <span class="string">"bessie"</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pre(x) (x + 5) % 6</span></span><br><span class="line">ll f[N];</span><br><span class="line"><span class="type">int</span> p[N][<span class="number">7</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"c.in"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">"c.out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) p[n + <span class="number">1</span>][i] = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i; --i) {</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) {</span><br><span class="line">p[i][j] = p[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (s[i] == pp[j]) {</span><br><span class="line"><span class="keyword">if</span> (j &lt; <span class="number">5</span>) p[i][j] = p[i + <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> p[i][j] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">f[i] = f[p[i][<span class="number">0</span>] + <span class="number">1</span>] + n + <span class="number">1</span> - p[i][<span class="number">0</span>];</span><br><span class="line">ans += f[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h1 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h1><p>看懂了有一年 noip 那个树的重心那道题。xht 的方法还是非常巧妙的，%%%。还有就是呢，我还没有写出来那道题（,,ԾㅂԾ,,），嘻嘻，但肯定会写出来的。我现在都还为我写出了喵了个喵而感到高兴，喵~。</p><p>然后就没啥事了。</p><p>真的吗？？？</p><p>(￣ε(#￣)，你不觉得换这么多行不丑吗……好了不开玩笑了，我们进入下一个标题。</p><h1 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h1><p>打完今日模板后就去打 vp 了，导致没有写总结，呜呜呜。可怜。其实不是立刻，中间还是隔了亿点点时间的……都怪我，┭┮﹏┭┮。那场 vp 就看我 [[题解/Codeforces/Codeforces 作题记录1|Codeforces 作题记录1]] 里面的记录了吧，这里就不记载了。</p>]]></content>
    
    
    <summary type="html">今天是运动会的第二天！依然与我无瓜。今天上午练习赛，有趣。下午 vp。哈嘻。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="字符串" scheme="https://blog.huasushis.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="codeforces" scheme="https://blog.huasushis.cn/tags/codeforces/"/>
    
    <category term="USACO" scheme="https://blog.huasushis.cn/tags/USACO/"/>
    
    <category term="贪心" scheme="https://blog.huasushis.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="汉明距离" scheme="https://blog.huasushis.cn/tags/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>2023年11月1日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%881%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B411%E6%9C%881%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-11-01T14:50:26.000Z</published>
    <updated>2023-11-01T15:31:23.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天是 11 月的第一天！纪念纪念！这是我在地球上的第 5501 天！开心～。今天一不小心没有考好，反省反省反省。首先是 T1 爆零了，原因：不太清楚。主要是知道正解之后就明白了，但是考试的时候还是要多多揣摩出题人的心理。其实的话，emm，中间阿，算了，就这样。然后第二题，我本以为 nq 能过的。害，还是要想清楚然后测试才行。还有的话……<strong>要多想</strong>。其实的话，T3 式子的话也并不是很难，要静下心来思考，不要因为前两道题造成的压力而不愿意去思考后面两道题。其实的话，也可能是因为前两道题耗费比较多的精力，还有就是可能昨天晚上睡得太晚了，要早一点睡觉才行。还是的话……就那样吧，不要害怕。</p><p>哦对，还有，今天感觉都是考思维的题目，标签都不好贴呢（伤心）。但是没有关系！思维也能成为 tags！</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这里来讲题解。emm，其实并不是很想写什么东西的。但是还是简单讲解以下思路吧！具体还是去看 std 的题解吧。那么，嘻嘻，还没有放链接呢，放一个：<a class="link" href="http://oi.cdshishi.net:9001/contest/65418be24d55610660675b82">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。好，现在来简单讲解一下思路。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>有一个 30 的常数？那么，就是每次尝试处理掉最小的，类似于栈，但是从小到大枚举每一次处理掉的数就行。还有方法就是呢，有同学用的单调栈，也是很行的。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>就是从大到小排序，加进来一个格子对行和列都有贡献。对的。很好。就是这样。然后处理一下就完了。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>推式子。我们考虑贡献。相同的按照第一个来。我们计算大区间一个格子有贡献的所有情况减去大小区间一个格子都有贡献。推一推式子就行，看起来并不是那么的难。</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>目前还不会，还是会了更好。毕竟会了就会了，会了总是要好的？真的吗。虽然我并不知道会了是不是会更好，但是我还是愿意会的？真的吗？可能是觉得有些难度吧。但是总之，我可能还是很想会的？那就是这样吧！话说这道题和之前一道题很像，都是 lca 重不重叠，还是那个 noi 2018 的那个情报啥的，情报计划？也许是的，思路看起来有异曲同工之妙。[[2023年10月25日模拟赛#T4|2023年10月25日模拟赛]]。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在要做 noip 真题。还是很难的。目前正尝试努力作出喵了个喵。很妙阿，嘻嘻。但是不管怎么说，我也不知道说啥，可能就是那样吧，你是懂的，就是那样！对。哈哈，你已经明白了，就是要这样子，向前冲吧？走过去也挺好的。</p><p>喜报！喵了个喵调出来拉！嘻嘻，太开心哩！有很多需要注意的地方，非常有教育意义！嘻嘻，我的任务完成啦！</p>]]></content>
    
    
    <summary type="html">今天是11月的第一天哟！(＾Ｕ＾)ノ~！今天是学校运动会的开幕式，看起来挺热闹的，我们在做模拟赛！祝他们开心！</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="树" scheme="https://blog.huasushis.cn/tags/%E6%A0%91/"/>
    
    <category term="noip" scheme="https://blog.huasushis.cn/tags/noip/"/>
    
    <category term="思维" scheme="https://blog.huasushis.cn/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月31日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8831%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8831%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-31T14:48:15.000Z</published>
    <updated>2023-10-31T14:57:00.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天就是 10 月的最后一天啦。还是很紧张。noip 看起来没有几天了。有一点点感伤，可能也是有一点点秋天的缘故吧。要放松放松。心平气和。嘻嘻。就要 11 月了，要穿的衣服也将会越来越多了，冬天也不远了。上周的今天是霜降，到考 noip 那周差不多就已经立冬了。看样子今年又要过去了。还有多久才能毕业呢？不要急，会很远，会很近。哈哈，日子也就一天一天过去了，虽然看起来我并没有什么收获，但是却是每天都是崭新的自己。嘻嘻，每天过得也都很平淡但很充实。话说，最近看到，有一部新番，叫 “葬送的芙蓉莲”，据说风评很好，看起来不累，有时间可以看看。《间谍过家家》也出第二季了，这两部比较感兴趣。</p><p>说回正题，话说什么是正题呢？我也不知道啊哈哈。我也不知道该写写啥，嘻嘻。总之想写啥就写啥哈哈。话说今天我们学校开运动会了，彩排。下面一直很热闹。我们在上面。有一点点吵，但是下面的人一定很开心吧！我们应该是没有参加运动会的机会了吧呼呼，还是有一点点可惜。但是十二月份听说有合唱比赛，还是很感兴趣的，希望能参加吧。</p><p>还有一件事，我貌似还没有说回正题——但是没有关系，今天是万圣夜，虽然对于中国这边来说没有什么影响，但还是希望西方的友人们节日快乐。还有就是，听说 steam 打折了，但是我还是不是很想花钱。</p><p>说回我自己（但不是正题），最近有一种轻松的累，嘻嘻，其实也还好。ee。好啦，不瞎扯了，来说说今天的题目吧。</p><h1 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h1><p>早上搞了一道大模拟，模拟电梯，还挺好玩的，写起来是每一步都有顺序的，很有趣。然后还有第二道题，叫夜宵二号，有点复杂，没有做出来，好可惜。<a class="link" href="http://oi.cdshishi.net:9001/p/P10250?tid=654056574d556106606712b9">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。由于正片太水了，所以把这道题的代码贴一下，我觉得还是比较清晰的。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp2 make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y, z) mp2(mp2(x, y), z)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> inform[<span class="number">6</span>][<span class="number">128</span>] = </span><br><span class="line">{<span class="string">"%02d:%02d The elevator starts to move up from floor %d.\n"</span>,</span><br><span class="line"><span class="string">"%02d:%02d The elevator starts to move down from floor %d.\n"</span>,</span><br><span class="line"><span class="string">"%02d:%02d The elevator stops at floor %d.\n"</span>,</span><br><span class="line"><span class="string">"%02d:%02d %d people leave the elevator.\n"</span>,</span><br><span class="line"><span class="string">"%02d:%02d %d people enter the elevator.\n"</span>};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">reques</span> {</span><br><span class="line">  <span class="type">int</span> t, s, d;</span><br><span class="line">  <span class="built_in">reques</span>(<span class="type">int</span> t = <span class="number">0</span>, <span class="type">int</span> s = <span class="number">0</span>, <span class="type">int</span> d = <span class="number">0</span>): <span class="built_in">t</span>(t), <span class="built_in">s</span>(s), <span class="built_in">d</span>(d) {}</span><br><span class="line">}a[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">elevator</span> {</span><br><span class="line">  <span class="type">bool</span> is_free, is_run;</span><br><span class="line">  <span class="type">int</span> floor, direc; <span class="comment">//1 0 -1</span></span><br><span class="line">  list&lt;reques&gt; ren;</span><br><span class="line">  <span class="built_in">elevator</span>() {</span><br><span class="line">    is_free = <span class="literal">true</span>;</span><br><span class="line">    floor = direc = <span class="number">0</span>;</span><br><span class="line">    is_run = <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">}elev;</span><br><span class="line">list&lt;reques&gt; quer[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> k, n, p;</span><br><span class="line"><span class="type">int</span> tim;</span><br><span class="line"><span class="type">int</span> solvednum;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkend</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> solvednum == n;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;n, &amp;p);</span><br><span class="line">  elev.floor = k;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a[i].t, &amp;a[i].s, &amp;a[i].d);</span><br><span class="line">  }</span><br><span class="line">  <span class="type">int</span> qq = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">checkend</span>()) {</span><br><span class="line">    <span class="keyword">while</span> (qq &lt;= n &amp;&amp; a[qq].t == tim) {</span><br><span class="line">      quer[a[qq].s].<span class="built_in">emplace_back</span>(a[qq]);</span><br><span class="line">      ++qq;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (elev.is_free) {</span><br><span class="line">      vector&lt;reques&gt; q;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : quer[i]) q.<span class="built_in">emplace_back</span>(j);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (q.<span class="built_in">empty</span>()) <span class="keyword">goto</span> nxt;</span><br><span class="line">      <span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), [&amp;](<span class="keyword">auto</span> x, <span class="keyword">auto</span> y){<span class="keyword">return</span> <span class="built_in">mp</span>(x.t, (x.s != elev.floor), x.s == elev.floor? x.s &gt; x.d : x.s &lt; elev.floor) &lt; <span class="built_in">mp</span>(y.t, (y.s != elev.floor), y.s == elev.floor? y.s &gt; y.d : y.s &lt; elev.floor);});</span><br><span class="line">      elev.is_free = <span class="literal">false</span>;</span><br><span class="line">      elev.direc = (q.<span class="built_in">front</span>().s == elev.floor ? (q.<span class="built_in">front</span>().d &gt; q.<span class="built_in">front</span>().s ? <span class="number">1</span> : <span class="number">-1</span>) : (q.<span class="built_in">front</span>().s &gt; elev.floor ? <span class="number">1</span> : <span class="number">-1</span>));</span><br><span class="line">    }</span><br><span class="line">    nxt:</span><br><span class="line">    <span class="keyword">if</span> (!elev.is_free) {</span><br><span class="line">      <span class="type">int</span> numxdt = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> i : elev.ren) {</span><br><span class="line">        <span class="keyword">if</span> (i.d == elev.floor) {</span><br><span class="line">          ++numxdt;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (numxdt) {</span><br><span class="line">        <span class="keyword">if</span> (elev.is_run) {</span><br><span class="line">          elev.is_run = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">printf</span>(inform[<span class="number">2</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, elev.floor);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(inform[<span class="number">3</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, numxdt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = elev.ren.<span class="built_in">begin</span>(); i != elev.ren.<span class="built_in">end</span>();) {</span><br><span class="line">          <span class="keyword">if</span> (i -&gt; d == elev.floor) {</span><br><span class="line">            i = elev.ren.<span class="built_in">erase</span>(i);</span><br><span class="line">          } <span class="keyword">else</span> {</span><br><span class="line">            ++i;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        solvednum += numxdt;</span><br><span class="line">        <span class="keyword">goto</span> ed;</span><br><span class="line">      }</span><br><span class="line">      <span class="type">int</span> sdt = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> i : quer[elev.floor]) {</span><br><span class="line">        <span class="keyword">if</span> ((i.d - i.s) * elev.direc &gt; <span class="number">0</span>) ++sdt;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ((<span class="type">int</span>)elev.ren.<span class="built_in">size</span>() &lt; p &amp;&amp; sdt) {</span><br><span class="line">        sdt = <span class="built_in">min</span>(sdt, p - (<span class="type">int</span>)elev.ren.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (elev.is_run) {</span><br><span class="line">          elev.is_run = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">printf</span>(inform[<span class="number">2</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, elev.floor);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(inform[<span class="number">4</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, sdt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = quer[elev.floor].<span class="built_in">begin</span>(); i != quer[elev.floor].<span class="built_in">end</span>() &amp;&amp; sdt;) {</span><br><span class="line">          <span class="keyword">if</span> ((i -&gt; d - i -&gt; s) * elev.direc &gt; <span class="number">0</span>) {</span><br><span class="line">            elev.ren.<span class="built_in">emplace_back</span>(*i);</span><br><span class="line">            i = quer[elev.floor].<span class="built_in">erase</span>(i);</span><br><span class="line">            --sdt;</span><br><span class="line">          } <span class="keyword">else</span> {</span><br><span class="line">            ++i;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">goto</span> ed;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (!elev.is_run) {</span><br><span class="line">        <span class="keyword">if</span> (elev.direc &gt; <span class="number">0</span>) {</span><br><span class="line">          <span class="built_in">printf</span>(inform[<span class="number">0</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, elev.floor);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="built_in">printf</span>(inform[<span class="number">1</span>], tim / <span class="number">60</span>, tim % <span class="number">60</span>, elev.floor);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      elev.is_run = <span class="number">1</span>;</span><br><span class="line">      elev.floor += elev.direc;</span><br><span class="line">    }</span><br><span class="line">    ed:</span><br><span class="line">    <span class="keyword">if</span> (!elev.is_free) {</span><br><span class="line">      <span class="type">bool</span> flg = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = elev.floor + elev.direc; i &gt; <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">100</span>; i += elev.direc) {</span><br><span class="line">        <span class="keyword">if</span> (quer[i].<span class="built_in">size</span>()) {</span><br><span class="line">          flg = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (!flg)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> i : quer[elev.floor]) {</span><br><span class="line">        <span class="keyword">if</span> ((i.d - i.s) * elev.direc &gt; <span class="number">0</span> &amp;&amp; (<span class="type">int</span>)elev.ren.<span class="built_in">size</span>() &lt; p) {</span><br><span class="line">          flg = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (!elev.ren.<span class="built_in">size</span>() &amp;&amp; !flg) {</span><br><span class="line">        elev.direc = -elev.direc;</span><br><span class="line">        flg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) {</span><br><span class="line">          <span class="keyword">if</span> (quer[i].<span class="built_in">size</span>()) {</span><br><span class="line">            flg = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!flg) elev.is_free = <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    ++tim;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h1 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h1><p>下午做 noip 真题，复习了一下之前做过的题目，挺好的，哈哈，还是很有难度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又度过一天啦！希望最后能有一个完美的结局。</p>]]></content>
    
    
    <summary type="html">今天是万圣节，但是似乎并没有什么关系。每天都是新的一天，迎接新的生活！(●&#39;◡&#39;●)</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="模拟" scheme="https://blog.huasushis.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="noip" scheme="https://blog.huasushis.cn/tags/noip/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月30日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8830%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8830%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-10-30T14:54:35.000Z</published>
    <updated>2023-10-30T15:41:20.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先上链接！<a class="link" href="http://oi.cdshishi.net:9001/contest/653e55864d5561066066bc68">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。今天，感觉其实并不是很难，但是感觉并没有考到最好。有个题有想法但是看起来很难所以没有去实现，后来发现其实很简单。应该胆大心细，沉着应对每一场考试。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这道题，最简单的做法就是筛一遍然后倒着把每一个合数都分解到更小的就行。还有方法就是枚举每一个质数看有多少个。都可以。[[线性筛]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>结论题。只有在直径是奇数时直径中间那个点上 Bob 能赢。我们首先考虑链的情况，就能发现这一点。然后推广到一般的树，发现其它的点都能和直径上的一点对应。完成! [[博弈论]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>其实显而易见要选一个最长的其它都是 1 位，然后开头有不少于 k - 1 个 0 的时候特判一下。但是我不知道为什么觉得这个结论不太对就打暴力了（)。还是要注意一下。std 用的是 hash 的方法，但是一眼就感觉能被 hack，但是能过。最正确的方法就是最小表示法或者用 SA 来做。不过 hash 还是好写得多。[[hash]] [[字符串]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>这道题 luogu 上有原题哉！<a class="link" href="https://www.luogu.com.cn/problem/P9312">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。还是黑的哦！所以要怎么做呢？我们一开始应该的想的是区间 dp。但是我们发现样很难转移，而且我们又发现 k 和 n 是同阶的，而且我们发现走一段山峰灯笼区间是连续的，所以我们定义状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.952ex" height="2.261ex" role="img" focusable="false" viewbox="0 -705 1304.9 999.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container> 表示灯笼区间是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="6.018ex" height="2.363ex" role="img" focusable="false" viewbox="0 -750 2659.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1134,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1578.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(2381.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>，那么肯定能对应山峰的一段区间，然后转移就很方便了。这样会发现复杂度是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2919.8 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的，但是我们将 i 按照 a 从小到大排序，j 按照 b 大到小排序，这样我们会发现枚举时左端点确定时区间大小减小，右端点同理。因此我们用堆维护，不合法直接弹出，对后面也不会有任何影响。结合代码看会非常好懂。[[dp]]</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> p[N], c[N], a[N], b[N], al[N], ar[N], bl[N], br[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">"lantern.in"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">"lantern.out"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, h + i);</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(k)</span>, <span class="title">r</span><span class="params">(k)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, p + i, c + i, a + i, b + i);</span><br><span class="line">    al[i] = p[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (al[i] &gt; <span class="number">1</span> &amp;&amp; h[al[i] - <span class="number">1</span>] &gt;= a[i]) --al[i];</span><br><span class="line">    ar[i] = p[i] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ar[i] &lt; n &amp;&amp; h[ar[i] + <span class="number">1</span>] &gt;= a[i]) ++ar[i];</span><br><span class="line">    bl[i] = p[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (bl[i] &gt; <span class="number">1</span> &amp;&amp; h[bl[i] - <span class="number">1</span>] &lt;= b[i]) --bl[i];</span><br><span class="line">    br[i] = p[i] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (br[i] &lt; n &amp;&amp; h[br[i] + <span class="number">1</span>] &lt;= b[i]) ++br[i];</span><br><span class="line">    l[i - <span class="number">1</span>] = r[i - <span class="number">1</span>] = i;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">  <span class="built_in">sort</span>(l.<span class="built_in">begin</span>(), l.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> x, <span class="type">int</span> y){<span class="keyword">return</span> <span class="built_in">mp</span>(a[x], -b[x]) &lt; <span class="built_in">mp</span>(a[y], -b[y]);});</span><br><span class="line">  <span class="built_in">sort</span>(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> x, <span class="type">int</span> y){<span class="keyword">return</span> <span class="built_in">mp</span>(b[x], -a[x]) &gt; <span class="built_in">mp</span>(b[y], -a[y]);});</span><br><span class="line">  priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; lz[N], rz[N];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : l) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> j : r) {</span><br><span class="line">      <span class="keyword">if</span> (a[i] &lt; a[j] &amp;&amp; b[j] &lt; b[i]) {</span><br><span class="line">        f[i][j] = f[i][i];</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; b[i] &lt; b[j]) {</span><br><span class="line">        f[i][j] = f[j][j];</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt;= a[j] &amp;&amp; b[i] &lt;= b[j]) {</span><br><span class="line">        <span class="type">int</span> z = <span class="built_in">max</span>(al[i], bl[j]), y = <span class="built_in">min</span>(ar[i], br[j]);</span><br><span class="line">        <span class="keyword">if</span> (p[i] &lt; z || p[i] &gt; y || p[j] &lt; z || p[j] &gt; y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (z == <span class="number">1</span> &amp;&amp; y == n) {</span><br><span class="line">          f[i][j] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">goto</span> nxt;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (!lz[i].<span class="built_in">empty</span>() &amp;&amp; (p[lz[i].<span class="built_in">top</span>().se] &lt; z || p[lz[i].<span class="built_in">top</span>().se] &gt; y || a[lz[i].<span class="built_in">top</span>().se] &gt; b[j])) lz[i].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!lz[i].<span class="built_in">empty</span>()) {</span><br><span class="line">          f[i][j] = lz[i].<span class="built_in">top</span>().fi;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (!rz[j].<span class="built_in">empty</span>() &amp;&amp; (p[rz[j].<span class="built_in">top</span>().se] &lt; z || p[rz[j].<span class="built_in">top</span>().se] &gt; y || b[rz[j].<span class="built_in">top</span>().se] &lt; a[i])) rz[j].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!rz[j].<span class="built_in">empty</span>()) {</span><br><span class="line">          (f[i][j] == <span class="number">-1</span> || f[i][j] &gt; rz[j].<span class="built_in">top</span>().fi) &amp;&amp; (f[i][j] = rz[j].<span class="built_in">top</span>().fi);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      nxt:</span><br><span class="line">      <span class="keyword">if</span> (~f[i][j]) {</span><br><span class="line">        lz[i].<span class="built_in">emplace</span>(f[i][j] + c[j], j);</span><br><span class="line">        rz[j].<span class="built_in">emplace</span>(f[i][j] + c[i], i);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[i][i] == <span class="number">-1</span> ? f[i][i] : f[i][i] + c[i]);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今天天气很黑，外面都是黑的。那看样子是天黑了，害。十月份就过去啦。感觉恍恍惚惚的。好像一直都是恍恍惚惚的。心情看起来也很快乐与舒畅呢。对世界抱有经久不衰的热情与好奇心，怀有一颗童心，积极面对生活。大家也都很认真在用功。我也要努力呀。</p>]]></content>
    
    
    <summary type="html">又是新的一周啦！可惜的是十月就要过去了。又是一个月了。我想的太多了，祝好。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="素数筛" scheme="https://blog.huasushis.cn/tags/%E7%B4%A0%E6%95%B0%E7%AD%9B/"/>
    
    <category term="字符串" scheme="https://blog.huasushis.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串hash" scheme="https://blog.huasushis.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2hash/"/>
    
    <category term="线性筛" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    
    <category term="博弈论" scheme="https://blog.huasushis.cn/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月28日模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8828%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8828%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-10-28T09:27:46.000Z</published>
    <updated>2023-10-28T11:37:20.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><a class="link" href="http://oi.cdshishi.net:9001/contest/653c6bee4d55610660660a51">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>嘻嘻，今天考炸了。T1 爆零了，因为头文件打错了（。详情请见 AFO 小技巧。</p><p>感觉今天都是偏思维的。T2、T3 代码都不长；T1 还行，有很多细节（T4：？）。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这道题不难，感觉更加考验的是代码能力，因为分类讨论还是有许多难度。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>区间 dp。当时我想复杂了，每次相当于直接删掉最小的数的一边然后直接枚举另一边还删了几个然后进行前缀和优化即可。[[区间dp]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>会发现对于一个人，我们可以知道如果他会自爆，那么时间就是他认为其他人自爆的最早时间 + 1。接着我们会发现一个人去想象另一个人的操作就是去掉一坨区间，因此对于一坨区间我们只需要找到最少的能让每个区间都包括的一些点，类似于区间种树。那么我们对于一个人，直接先前缀和和后缀和预处理出来（贪心，在区间最后放），然后左边区间的值和右边区间的值得和 + 1的最小就是答案。就可以做到严格 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。详情可以看我<a class="link" href="http://oi.cdshishi.net:9001/record/653cbec04d556106606679b7">代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。[[贪心]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>就没有人会啊。std 有14 K。就先放着吧。总是会会的。一直都是会的。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>开心，又到了周末。伤心，一周又结束了。</p>]]></content>
    
    
    <summary type="html">考炸了，但是没关系，继续努力！</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="区间dp" scheme="https://blog.huasushis.cn/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
    <category term="贪心" scheme="https://blog.huasushis.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月27日练习赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8827%E6%97%A5%E7%BB%83%E4%B9%A0%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8827%E6%97%A5%E7%BB%83%E4%B9%A0%E8%B5%9B/</id>
    <published>2023-10-27T14:50:57.000Z</published>
    <updated>2023-10-27T15:05:29.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天打了一场练习赛，难度相对较小。但也是很有学习意义的。有许多的经验的套路，哈，又要写总结了。嘻嘻，可以。</p><p>不知道要说什么，太难了，呜呜呜，难受。那就闲谈吧！比如说，什么呢？我们学校要开运动会了！但是我们不会参加，可惜呢。还有，今天下午文化课开家长会，学校里一直很热闹，都在排练运动会的节目。今天下午的体育课去打乒乓球连个桌子都没有了。还有就是，今天的题目都改完了，可以说是很大的激励。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>接下来放一下简要的题解吧！哎呀，还没有放比赛链接呢！<a class="link" href="http://oi.cdshishi.net:9001/contest/653b2e4e4d5561066065aaab">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。今天这套题是组出来的，但是也很有意义（again）。♣说了，可恶。还是来说题解吧。为什么我要写这么多废话呢？可能是因为我博客这个标题的行间距比较大，看起来如果下面不写很多字的话就会很丑。所以我要多写一点字。好无聊啊，好幼稚啊。我为什么要写这么多没有用的字啊，啊啊啊，为什么我越写越难受啊！啊啊啊，我真的不想写了啊！我要爆炸了！~不！我弱小的内心无法承受住如此多无聊的文字！不！不！不！（什么玩意，<del>小可爱</del>）</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这道题我本是用树状数组两个 log 过的，还有人在线段树上二分。但是题解的方法显然更加精妙。《简单思维题》，这是题解的原话。题解是直接二分最终的答案，我们会发现比这个大的毫无用处，因此我们只需要每次 check 的时候分别记录一下多少个比这个小，等于就行。（妙哉！妙哉！）[[二分答案]]</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>原题：LOJ6033。</p><p>可以直接用匈牙利 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.806ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 3892.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="msup" transform="translate(2188.6,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(911,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3503.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 过这道题，甚至比用 dinic 还更快。推荐这一篇文章，代码也比较简洁：<a class="link" href="https://www.cnblogs.com/chenxiaoran666/p/LOJ6033.html">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。题解是在 dinic 上面跑了之后拿没有匹配的边跑了一个 tarjan 搞到边双，然后找到一个匹配了的点，如果匹配的边的两个点在同一个这样的边双中，就不是必经的点，就必输。这个我还不是很理解，可能还需要再理解理解。[[二分图]] [[网络流]] [[匈牙利算法]] [[tarjan]]</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>来源：洛谷P3646。</p><p>第一反应 dp，如果没有意识到一些东西的话，可能就会没有意识到直接搞是有后效性的。我们同时观察到对于每一个二进制位是相对独立的，因此我们直接从高位枚举到低位，判断能不能是0。对于最后一个 subtask，我们观察下界是1，因此去 dp 为 0 最少分几段即可。 [[dp]]</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>这道题很有趣，有许多有趣的推论，需要记住。（为什么又是有趣啊！我为什么什么都觉得有趣啊！啊啊啊！为什么！我已经词穷了！我要怎么表达！啊啊啊！我要怎么形容一个有趣的题目而不说这个题目很有趣！啊啊啊！啊啊啊！这道题目很赏心悦目！）。就是先 dfs 一个树，然后线性基哐当哐当，然后每一位求贡献哐当哐当就出来了。如果知道这几个结论这道题就很简单了，就不具体讲做法了，讲一讲这几个重要！重要的！还非常 awesome！非常 amazing！非常 interesting！的结论! [[线性基]]</p><blockquote><ol><li>搜索树上的所有返祖边构成的简单环构成的线性基 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.602ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 708 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z"/></g></g></g></g></svg></mjx-container>， 能表示出图中所有环。</li><li>图中两点间所有路径的异或和，都可以由任意一条主干路径和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.602ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 708 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z"/></g></g></g></g></svg></mjx-container> 表示出来。</li><li>如果线性基中有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.891ex" height="1.038ex" role="img" focusable="false" viewbox="0 -448 394 459"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"/></g></g></g></g></svg></mjx-container> 个元素，则可以表示出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.069ex" height="1.528ex" role="img" focusable="false" viewbox="0 -675.5 914.6 675.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g></g></g></g></svg></mjx-container> 个数，只要存在一个元素在二进制的第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 位为 1，则能表示出的所有数中，有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.994ex" height="1.887ex" role="img" focusable="false" viewbox="0 -833.9 1765.3 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"/></g></g><g data-mml-node="mo" transform="translate(394,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1172,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container> 个数第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 位为 1 。</li></ol></blockquote><p>P.S. 题解有一个地方有误，倒数第二行不用减一。</p><hr><p>就做完了。呃呃呃(⊙﹏⊙)。确实挺有趣的。（怎么又是有趣啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊！我不要再啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊了！我啊啊啊啊啊啊啊啊啊啊阿啊啊啊啊啊阿啊啊啊啊啊啊啊啊啊阿起来好难受啊啊啊啊啊啊啊啊啊啊啊啊！！！！！！！）好吧，正经一下，在这个位置一般人会写一些什么东西呢？让我想一想，想一想，今天真是美好的一天啊！美好的一天又结束啦！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>美好的一天，怎么又是这句话，恼。心情很复杂，心脏怦怦跳。不能安息。我要写一首诗，来记录今天发生的事情，表达我的心情。</p><p>oh 不。今天一点也不美好。我才想起来。今天李克强总理和吴尊友同志都离开人世了。默哀，致敬，一路走好。</p><p>写一首诗吧！</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正是子时夜正浓，星光似暗似朦胧。</span><br><span class="line">虫鸣光闪势正盛，一刹之间万物止。</span><br><span class="line">一星陨落万兴生，正是年少好时光。</span><br><span class="line">学习总理真精神，爱国爱党爱人民！</span><br></pre></td></tr></table></figure></div><p>（打油诗，不好请见谅，最后一句想不出来了哈哈）</p><p>再写一首记载今天的事吧！</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">天清气冷心如玉，空中有乐非常欢。</span><br><span class="line">静出于动反自然，是祸是福皆天命。</span><br><span class="line">凡常之中自有清，顺浊自能反源本。</span><br><span class="line">顺逆是非皆为顺，顺中真顺逆可行。</span><br><span class="line">心性淡薄无念想，无为而为自能达。</span><br><span class="line">巅峰未必真思念，坠入深渊可成仙。</span><br><span class="line">吹纳谈吐融于世，何人能出九重天？</span><br><span class="line">平息安静受于境，心中自能开人间。</span><br></pre></td></tr></table></figure></div><p>（写了什么事啊，我都不知道）</p>]]></content>
    
    
    <summary type="html">发疯的一天。因为无摘要可以写了，所以疯了。疯了就可以写摘要了。另外，默哀。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="网络流" scheme="https://blog.huasushis.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="匈牙利算法" scheme="https://blog.huasushis.cn/tags/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分答案" scheme="https://blog.huasushis.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="二分图" scheme="https://blog.huasushis.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
    <category term="线性基" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
    <category term="tarjan" scheme="https://blog.huasushis.cn/tags/tarjan/"/>
    
    <category term="dp后效性" scheme="https://blog.huasushis.cn/tags/dp%E5%90%8E%E6%95%88%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月26日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8826%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8826%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-26T14:36:56.000Z</published>
    <updated>2023-10-26T14:46:37.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>太伤心了，晚上的时候忘记白天已经写了一部分总结了，然后用 echo 生成直接覆盖了呜呜呜。</p><h2 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h2><p>那白天就简要概括一下。上午做了 zgs 说要做的一些题，然后感觉不太熟悉线段树合并。找回了上午的计划。[[树上差分]]</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">前置模板（Sper OJ）</span><br><span class="line">--------------------------------------------</span><br><span class="line">A1323. 【基础模板】差分 - 二维差分 - 地毯</span><br><span class="line">A1108. 【NOIP模板】树上差分 - 点差分- 松鼠的新家</span><br><span class="line">A1109. 【NOIP模板】树上差分 - 边差分 - 运输计划</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【练习赛】</span><br><span class="line">-------------------------------------------------</span><br><span class="line">树上差分：Luogu P3128 [USACO15DEC] Max Flow P</span><br><span class="line">树上前缀和：Luogu P4427 [BJOI2018] 求和</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【树上差分-推荐习题】</span><br><span class="line">-----------------------------------------</span><br><span class="line">Luogu P3258 [JLOI2014] 松鼠的新家</span><br><span class="line">Luogu P2680 [NOIP2015 提高组] 运输计划</span><br><span class="line">Luogu P1600 [NOIP2016 提高组] 天天爱跑步</span><br><span class="line">Luogu U143800 暗之连锁</span><br><span class="line">Luogu P4556 [Vani有约会] 雨天的尾巴（前置知识：线段树合并）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【分层图】</span><br><span class="line">----------------</span><br><span class="line">继续上次题目……（似乎还没做）伤心</span><br></pre></td></tr></table></figure></div><h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><p>尝试理解昨日 T4 和其改编来的原题 NOI 2018 情报啥的，失败，不会。但是 pigeon 大佬改出来了，%%%。</p><h2 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h2><p>晚上一起打了一场 cf。<a class="link" href="https://codeforces.com/contest/1887">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。是 div 1，就很有难度。切了前三道题。讲解一下思路。有一个 A1 和 A2，这里直接讲解 hard version。</p><h3 id="Dances-Hard-Version"><a href="#Dances-Hard-Version" class="headerlink" title="Dances (Hard Version)"></a><a class="link" href="https://codeforces.com/contest/1887/problem/A2">Dances (Hard Version) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>题目大意。一个长为 n - 1 的 a 数组和长为 n 的 b 数组，枚举一个加入 a 的数从 1 到 m，然后求最大的  k 使得一个 a 的子序列和 b 的子序列一一对应时 a 都小于 b 的 k 的和。（我在说啥？你们还是去看题面吧）。会发现排序后 a 的前几位和 b 的后几位匹配。先二分求出不加入 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 的一个最长的 l，容易发现 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 小于一个数时会是 l + 1，大于后会是 l。那么就将 a 的前 l 位放在 b 的前 l + 1 位开始，一定会有一位开始不满足条件，那么这个地方的 b 值就是临界点。代码：<a class="link" href="https://codeforces.com/contest/1887/submission/229850015">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Time-Travel"><a href="#Time-Travel" class="headerlink" title="Time Travel"></a><a class="link" href="https://codeforces.com/contest/1887/problem/B">Time Travel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>虽然写起来不是很难，但是想还是有一点难度的。我最开始想的是分层图，但是会发现同一个时间可能会出现多次，如果暴力 bfs 或 转移会发现如果有一个时间有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.317ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 1466 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mn" transform="translate(966,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g></g></g></svg></mjx-container> 左右的边而这个时间反复出现就会爆炸。接着我们发现可以在一个地方停留。因此，我们想出了正解。直接把所有边都存在一个点中，我们 dijkstra，到一个点后考虑转移到另一个点。会发现要等到那条边出现的时间的时间才行。因此选择用主席树维护后缀各个时间出现的最早时间。然后就行了。注意细节，最后需要减一，因为到达后不需要再旅行了。时间复杂度差不多两个 log。代码很好写。代码：<a class="link" href="https://codeforces.com/contest/1887/submission/229859826">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">今天自己做题，但是想不出来摘要了。这说明什么呢，已经集训很久了，总结的摘要都想不出来了，可惜。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="cf" scheme="https://blog.huasushis.cn/tags/cf/"/>
    
    <category term="codeforces" scheme="https://blog.huasushis.cn/tags/codeforces/"/>
    
    <category term="树" scheme="https://blog.huasushis.cn/tags/%E6%A0%91/"/>
    
    <category term="树上差分" scheme="https://blog.huasushis.cn/tags/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月25模拟赛</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8825%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8825%E6%97%A5%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2023-10-25T14:53:32.000Z</published>
    <updated>2023-10-25T14:56:28.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a class="link" href="https://oi.cdshishi.net:9001/contest/6537ba104d55610660652cd7">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>今天的题目还是一如既往地难。可惜的是第一题我本来是写对了的，可惜在测试样例的时候输入的样例和我打开的答案文件不是一个样例的（）。天知道我为什么会把样例都看错，导致我写了一个暴力还爆零了。地山谦呀，还是要更加谦逊，要多多向优秀的人请教问题。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>目前改了前三道题，在这里来简单讲解以下思路。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这道题虽然不是很难，但是很难讲。就是已知一个非负矩阵每一行和每一列的最大值，要求满足条件的矩阵个数。会发现每一行每一列的顺序是无关的，就都排个序。然后我们依次从小到大枚举最大值，观察这个让这个最大值满足条件的情况数。会发现这个最大值影响的部分是一个 L 型（左上侧的更小，肯定不能放，右下的又无关了），要这些列、行满足条件。就直接 [[容斥]] 有多少行和多少列一定没有最大值就行。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>这道题邓老师的方法不是很理解，正解是 [[分块]]，个人认为比较好理解。对于一个查询，我们能够比较容易地发现，就是找到最近的一个影响这个点的1操作然后看这之间的2操作对其的影响。那么我们怎么分块呢？我们首先用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="6.688ex" height="3.024ex" role="img" focusable="false" viewbox="0 -983.7 2956 1336.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mfrac" transform="translate(1152,0)"><g data-mml-node="msup" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(487.6,-345) scale(0.707)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"/></g><rect width="1175" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(2567,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的复杂度用 bitset 求出每个点能够到达的点。然后对于每一个询问我们现在本块内查找是否有它的前一个 1 操作，如果有在本块内直接暴力搞，不然开一个数组来记录每个位置前一个影响的1操作（这个数组在每一个块结束后更新，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 更新（倒着来，标记一下））。我们考虑中间2操作的影响，如果在一个块内就暴力，我们考虑每一个块的2操作对每个位置的影响。我们直接每个块开一个数组，记录这个块中影响某个位置的最小值。当前一个 1 操作不在同一个块中时就这样搜索。为什么是对的？因为这中间没有其它影响这个点的 1 操作，所以肯定是对的。那么怎么获得这个数组呢？我们将每个块中的2操作按照值从小到大排序，标记以下并且修改就行。一个块中复杂度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p><p>P.S. 最开始块的大小我就开的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewbox="0 -843 1453 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"/></g><rect width="600" height="60" x="853" y="723"/></g></g></g></svg></mjx-container>，后来发现 T 了？然后尝试将每个块的长度开大，直接到 1000 都能过。猜测是每次块结束时要 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 更新，而且询问操作可能比较少的缘故。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>通过仔细观察可以发现每一次冒泡排序肯定最多往左移动一格。那么答案就是最大的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.266ex" height="1.852ex" role="img" focusable="false" viewbox="0 -661 2327.4 818.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(1567.4,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>，也就是位置减去排名。用一个值域[[线段树]]维护即可。要注意，对于一个数，离散化时要带上位置，显然当值相同时，位置越靠前排名越小。这道题 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.15ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4928.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mi" transform="translate(2206.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(3651.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mo" transform="translate(4539.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的实现有很多，不过写复杂一点更好理解。题解虽然短，但不直观，但是也是很有启发意义的。</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>改编自 NOI 2018 情报中心。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>要继续努力，保持谦逊，积极向上。</p>]]></content>
    
    
    <summary type="html">今天又考了模拟赛，还是很难，怎么会不难呢。难的也很可爱啊。</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="容斥" scheme="https://blog.huasushis.cn/tags/%E5%AE%B9%E6%96%A5/"/>
    
    <category term="线段树" scheme="https://blog.huasushis.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="分块" scheme="https://blog.huasushis.cn/tags/%E5%88%86%E5%9D%97/"/>
    
    <category term="NOI" scheme="https://blog.huasushis.cn/tags/NOI/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 作题记录1</title>
    <link href="https://blog.huasushis.cn/2023/Codeforces%20%E4%BD%9C%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
    <id>https://blog.huasushis.cn/2023/Codeforces%20%E4%BD%9C%E9%A2%98%E8%AE%B0%E5%BD%951/</id>
    <published>2023-10-24T14:46:27.000Z</published>
    <updated>2023-11-02T15:39:57.967Z</updated>
    
    <content type="html"><![CDATA[<p>[[2023年10月24日总结]] 此日做的题目。</p><h1 id="CF1836A"><a href="#CF1836A" class="headerlink" title="CF1836A"></a>CF1836A</h1><p><a class="link" href="https://codeforces.com/contest/1836/problem/A">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>此题比较容易，筒排以后验证一下是不是单调不增的就行。</p><h1 id="CF1836B"><a href="#CF1836B" class="headerlink" title="CF1836B"></a>CF1836B</h1><p><a class="link" href="https://codeforces.com/contest/1836/problem/B">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>特判一下答案是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container> 的情况，发现答案只和每个人分配的模 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container> 的余数有关，并且余数之和同余为0。并且还可以发现要额外补充的钱都可以用节省的前来补上，因此只需要考虑将每个人都放满 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="7.701ex" height="2.585ex" role="img" focusable="false" viewbox="0 -797.5 3404 1142.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"/></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(228.1,485) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="553.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(1237.6,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"/></g><g data-mml-node="mo" transform="translate(1903.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2904,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，然后计算模 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container> 多出来的减掉就可以。 #数论</p><h1 id="CF1836C-x2F-CF1835A"><a href="#CF1836C-x2F-CF1835A" class="headerlink" title="CF1836C/CF1835A"></a>CF1836C/CF1835A</h1><p><a class="link" href="https://codeforces.com/contest/1836/problem/C">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这道题我们首先会发现字典序和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 没有关系，因为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 相同的话 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 肯定相同，前两个不同 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 肯定不同，所以字典序是由 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 决定的。那么就必要容易想了。我们先判断表达式是否有解，然后枚举 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，接着很容易就能把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 的范围算出来，最后就能根据 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 算出答案对应的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，然后就能求出式子了。而且会发现超过3位的测试点不超过5个，所以显然能够在规定的时间内通过。</p><h1 id="CF1836D-x2F-CF1835B"><a href="#CF1836D-x2F-CF1835B" class="headerlink" title="CF1836D/CF1835B"></a>CF1836D/CF1835B</h1><p><a class="link" href="https://codeforces.com/contest/1836/problem/D">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这道题也是有一点难度的。最开始我是离散化了，后来发现这样反而更麻烦，只用排序就行。直观上看答案只用去找每个人前后两个以内的就行，因为此时能选择的范围的左右端点可能会发生一格的变化。</p><hr><p>[[2023年10月26日总结]] 的题目。</p><h1 id="CF1887A2"><a href="#CF1887A2" class="headerlink" title="CF1887A2"></a>CF1887A2</h1><p><a class="link" href="https://codeforces.com/contest/1887/problem/A2">Dances (Hard Version) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>题目大意。一个长为 n - 1 的 a 数组和长为 n 的 b 数组，枚举一个加入 a 的数从 1 到 m，然后求最大的  k 使得一个 a 的子序列和 b 的子序列一一对应时 a 都小于 b 的 k 的和。（我在说啥？你们还是去看题面吧）。会发现排序后 a 的前几位和 b 的后几位匹配。先二分求出不加入 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 的一个最长的 l，容易发现 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> 小于一个数时会是 l + 1，大于后会是 l。那么就将 a 的前 l 位放在 b 的前 l + 1 位开始，一定会有一位开始不满足条件，那么这个地方的 b 值就是临界点。代码：<a class="link" href="https://codeforces.com/contest/1887/submission/229850015">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="CF1887B"><a href="#CF1887B" class="headerlink" title="CF1887B"></a>CF1887B</h1><p><a class="link" href="https://codeforces.com/contest/1887/problem/B">Time Travel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>虽然写起来不是很难，但是想还是有一点难度的。我最开始想的是分层图，但是会发现同一个时间可能会出现多次，如果暴力 bfs 或 转移会发现如果有一个时间有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.317ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 1466 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mn" transform="translate(966,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g></g></g></svg></mjx-container> 左右的边而这个时间反复出现就会爆炸。接着我们发现可以在一个地方停留。因此，我们想出了正解。直接把所有边都存在一个点中，我们 dijkstra，到一个点后考虑转移到另一个点。会发现要等到那条边出现的时间的时间才行。因此选择用主席树维护后缀各个时间出现的最早时间。然后就行了。注意细节，最后需要减一，因为到达后不需要再旅行了。时间复杂度差不多两个 log。代码很好写。代码：<a class="link" href="https://codeforces.com/contest/1887/submission/229859826">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 #图论</p><hr><p>2023年11月2日更新。11月的第一场 vp。</p><p>[[2023年11月2日总结]] 这一天的题目！</p><p><a class="link" href="https://codeforces.com/contest/1827">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这是链接。</p><p>话说我换这么多行干啥（有毛病）。做了 3 道题。有一个 B1 和 B2。emm，我直接做的 B2，所以时间有点长……。请 <del>严格弱于我的</del> 同学们不要学习这种 <del>自以为是</del> 过于自信的 <del>技巧</del> 侥幸心理。</p><p>所以还是 B1、B2 就一起讲了。B1 应该也不是特别难。哦对，这一天总结我不是在学校里写的，所以……比较简略，请见谅（废话比题解还多，什么鬼）。</p><h1 id="CF1827A"><a href="#CF1827A" class="headerlink" title="CF1827A"></a>CF1827A</h1><p>这道题很简单，直接求比每一个 b 大的 a 的值有多少个再减去比这个数大的 b 值有多少个乘起来就行，很好证明。</p><h1 id="CF1827B2"><a href="#CF1827B2" class="headerlink" title="CF1827B2"></a>CF1827B2</h1><p>B1 的话请大家自己去思考了。这里我们会发现，对于一个串，它的代价是什么？我们首先可以发现它可以分成几段，就是长度减去段数。我们直接去找子串会发现很麻烦，于是我们就去找每一位的贡献，总的减去即可。现在我们需要确定一个段的贡献由哪一位决定？我最开始找的是每一段的第一个，后来发现很麻烦，还不能过 3e5 的点。于是我转换思路。就想每一段最小的那个。然后我们记录前面最近比它小的位置 l，和后面第一个比它小的位置 r（如果没有就是0和 n + 1），那么我们会发现这个子串的右端点不可能是 r，否则 r 就要到前面来，这个 i 位就不会最小了。那么左端点呢？我们会发现就是 l 左侧第一个大于 i 位的点 j 的右边开始。为什么呢？比较容易证明 j 的右边一定是可行的。那么 j 为什么不行？因为 j 位的值比 i 位的大，那么第一段就包含了<br> j 到 i 的所有数，最小的也不是 i。所以这样最后乘起来就行。不懂可以看代码：<a class="link" href="https://codeforces.com/contest/1827/submission/230981993">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 #字符串 #单调栈 #st表 #二分答案 </p>]]></content>
    
    
    <summary type="html">cf 的做题记录1</summary>
    
    
    
    <category term="题解" scheme="https://blog.huasushis.cn/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="cf" scheme="https://blog.huasushis.cn/tags/cf/"/>
    
    <category term="codeforces" scheme="https://blog.huasushis.cn/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2023年10月24日总结</title>
    <link href="https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8824%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huasushis.cn/2023/2023%E5%B9%B410%E6%9C%8824%E6%97%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-24T14:43:25.000Z</published>
    <updated>2023-10-24T14:45:36.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上午先改了今年 CSP 的 T4，看起来并不是那么难。有一个错误是因为有个地方没有开 <code>__int128</code>，不然会爆，写起来还是比较愉快的。</p><p>还有就是昨日的 T4，发现用队列优化（BFS）之后再剪枝后就能很快了。CF 上面时限15s，就很容易过了。昨天这道题1s 的限制实在是调不过去，就放弃了。</p><p>还打了几道 dp 的题目，还好。</p><p>下午的话，打了一场 cf 上的 vp,收获颇多。晚上继续该下午的题。</p><p><a class="link" href="https://codeforces.com/contest/1836/">cf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>做了前四道，简单记录以下思路。</p><h2 id="CF1836A"><a href="#CF1836A" class="headerlink" title="CF1836A"></a>CF1836A</h2><p><a class="link" href="https://codeforces.com/contest/1836/problem/A">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>此题比较容易，筒排以后验证一下是不是单调不增的就行。</p><h2 id="CF1836B"><a href="#CF1836B" class="headerlink" title="CF1836B"></a>CF1836B</h2><p><a class="link" href="https://codeforces.com/contest/1836/problem/B">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [[数论]]</p><p>特判一下答案是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container> 的情况，发现答案只和每个人分配的模 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container> 的余数有关，并且余数之和同余为0。并且还可以发现要额外补充的钱都可以用节省的前来补上，因此只需要考虑将每个人都放满 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="7.701ex" height="2.585ex" role="img" focusable="false" viewbox="0 -797.5 3404 1142.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"/></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(228.1,485) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="553.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(1237.6,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"/></g><g data-mml-node="mo" transform="translate(1903.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2904,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，然后计算模 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container> 多出来的减掉就可以。</p><h2 id="CF1836C-x2F-CF1835A"><a href="#CF1836C-x2F-CF1835A" class="headerlink" title="CF1836C/CF1835A"></a>CF1836C/CF1835A</h2><p><a class="link" href="https://codeforces.com/contest/1836/problem/C">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这道题我们首先会发现字典序和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 没有关系，因为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 相同的话 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 肯定相同，前两个不同 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g></g></g></svg></mjx-container> 肯定不同，所以字典序是由 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 决定的。那么就必要容易想了。我们先判断表达式是否有解，然后枚举 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，接着很容易就能把 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></svg></mjx-container> 的范围算出来，最后就能根据 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 算出答案对应的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，然后就能求出式子了。而且会发现超过3位的测试点不超过5个，所以显然能够在规定的时间内通过。</p><h2 id="CF1836D-x2F-CF1835B"><a href="#CF1836D-x2F-CF1835B" class="headerlink" title="CF1836D/CF1835B"></a>CF1836D/CF1835B</h2><p><a class="link" href="https://codeforces.com/contest/1836/problem/D">link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这道题也是有一点难度的。最开始我是离散化了，后来发现这样反而更麻烦，只用排序就行。直观上看只用去找每个人前后两个以内的就行，因为此时能选择的范围的左右端点可能会发生一格的变化。</p>]]></content>
    
    
    <summary type="html">今天自主学习，刷刷刷！</summary>
    
    
    
    <category term="总结" scheme="https://blog.huasushis.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="CSP-S" scheme="https://blog.huasushis.cn/tags/CSP-S/"/>
    
    <category term="dp" scheme="https://blog.huasushis.cn/tags/dp/"/>
    
    <category term="cf" scheme="https://blog.huasushis.cn/tags/cf/"/>
    
    <category term="codeforces" scheme="https://blog.huasushis.cn/tags/codeforces/"/>
    
    <category term="数论" scheme="https://blog.huasushis.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
</feed>
